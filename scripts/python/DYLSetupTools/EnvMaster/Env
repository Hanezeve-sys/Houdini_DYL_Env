
<!DOCTYPE html>
<html lang="en">
<head>



        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-2947225-1"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'UA-2947225-1');
        </script>



    <meta name="viewport" content="width=device-width, initial-scale=1">


    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="UTF-8">




    <link rel="icon" href="../images/logos/logo_32.png">
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="../images/logos/logo_144.png">



    <link rel="stylesheet" href="../static/css/pygments/autumn.css">
    <link rel="stylesheet" href="../static/scss/page.css">

    <link rel="stylesheet" href="../static/scss/page.css">

    <link rel="stylesheet" href="../hstatic/scss/hpage.css">
    <!-- 19.0.472 -->


    <script src="../static/js/jquery.min.js"></script>


    <script type="text/javascript" src="../static/js/flot/jquery.flot.min.js"></script>
    <script type="text/javascript" src="../static/js/flot/jquery.flot.resize.min.js"></script>
    <script type="text/javascript" src="../static/js/search.js"></script>
    <script type="text/javascript" src="../static/js/page.js"></script>
    <script type="text/javascript" src="../static/js/filters.js"></script>
    <script type="text/javascript" src="../static/js/respond.matchmedia.addListener.min.js"></script>

    <script type="text/javascript" src="../static/js/load.js"></script>
    <script type="text/javascript" src="../static/js/qwebchannel.js"></script>


    <title>Environment variables</title>

</head>
<body class="


    ">



        <nav role="navigation">
            <a href="../index.html" class="brand navitem">
        <img src="../images/logos/houdini_white.svg" />
    </a>





        <span id="navsearch" class="googlesearch">
            <form action="https://www.google.com/cse" id="cse-search-box">
		        <input type="hidden" name="cx" value="e5871c8f2244d330c" />
                <input type="hidden" name="ie" value="UTF-8" />
                <input type="text" name="q" size="31" />
                <input type="submit" name="sa" value="Search" />
            </form>
        </span>
        <script type="text/javascript" src="https://www.google.com/coop/cse/brand?form=cse-search-box&amp;lang=en">
        // This comment prevents the wiki2html translator from collapsing the opening and closing 'script' tags into one.  Collapsed script tags do not work on all browsers.
        </script>


        </nav>



    <main>
        <header class=""

        >



            <div id="title" class="title-content ">

                <p class="ancestors">

                        <a href="../index.html" class="ancestor">
                            Houdini 19.0
                        </a>
                        <i class="pathsep fa fa-angle-right"></i>

                        <a href="index.html" class="ancestor">
                            Reference
                        </a>
                        <i class="pathsep fa fa-angle-right"></i>

                </p>
                <h1 class="title " >
                    Environment variables



        <span class="subtitle"></span>


                </h1>



            </div>



        </header>



        <div id="content">
            <table id="premeta" class="metatable">

































            </table>
            <div class="clear"></div>




    <p >See <a href="../basics/config_env.html" class="link   None">how to set environment variables</a>.</p>











    <section class="section sortable ">
        <h2 class="label section" id="env_variables"
            data-title="variables"
        >

            Variables





        </h2>
        <div id="env_variables-body" class="content">







        <div class="filtered" data-sortable="true">
            <div class="interface">


            </div>
            <div class="original filtered-body">


    <ul>




    <li class="env_variables_item item "
        id="houdini_author"
        data-title="houdini_author"

    >
        <p class="label"><code>HOUDINI_AUTHOR</code></p>
        <div class="content">


    <p >Controls the username and machine name used when saving HDAs
    and hip files.  Normally your login name and hostname are used,
    but setting this to <code>myself@mydomain</code> will use a user name of myself
    and a hostname of mydomain instead.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_console"
        data-title="houdini_disable_console"

    >
        <p class="label"><code>HOUDINI_DISABLE_CONSOLE</code></p>
        <div class="content">


    <p >If set, disables creation of floating consoles on Windows
    machines.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_text_console"
        data-title="houdini_text_console"

    >
        <p class="label"><code>HOUDINI_TEXT_CONSOLE</code></p>
        <div class="content">


    <p >If set, instead of creating a floating console, a normal window
    shell will be created on NT machines.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_window_console"
        data-title="houdini_window_console"

    >
        <p class="label"><code>HOUDINI_WINDOW_CONSOLE</code></p>
        <div class="content">


    <p >On the Windows operating system, the setting of this environment variable
    will force the creation of a floating console regardless of whether its
    output is redirected. This is only necessary for broken shells that
    incorrectly start up Houdini window applications with redirected output.
    At the time of this writing, only Cygwin-compiled shells require this.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_verbose_error"
        data-title="houdini_verbose_error"

    >
        <p class="label"><code>HOUDINI_VERBOSE_ERROR</code></p>
        <div class="content">


    <p >Print out unexpected file save errors to the console as well as
    displaying them in error boxes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_file_load_warnings"
        data-title="houdini_disable_file_load_warnings"

    >
        <p class="label"><code>HOUDINI_DISABLE_FILE_LOAD_WARNINGS</code></p>
        <div class="content">


    <p >If set, suppresses the dialog that displays warnings encountered while
    loading a file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_old_spinner"
        data-title="houdini_old_spinner"

    >
        <p class="label"><code>HOUDINI_OLD_SPINNER</code></p>
        <div class="content">


    <p >If set, the old style interrupt dialog graphic will be used (i.e.
    the spinning pie).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_old_const_behaviour"
        data-title="houdini_old_const_behaviour"

    >
        <p class="label"><code>HOUDINI_OLD_CONST_BEHAVIOUR</code></p>
        <div class="content">


    <p >If set, the old behavior dealing with <code>constant()</code> expression segments
    is used instead. The old behavior allows changing the value of a
    <code>constant()</code> expression channel segment at any given frame within it, not
    just at its boundaries.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_show_old_render_properties"
        data-title="houdini_show_old_render_properties"

    >
        <p class="label"><code>HOUDINI_SHOW_OLD_RENDER_PROPERTIES</code></p>
        <div class="content">


    <p >If set, render properties from previous releases will be
    displayed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_show_old_shops"
        data-title="houdini_show_old_shops"

    >
        <p class="label"><code>HOUDINI_SHOW_OLD_SHOPS</code></p>
        <div class="content">


    <p >If set, SHOPs from previous releases will be displayed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_cpuid"
        data-title="houdini_disable_cpuid"

    >
        <p class="label"><code>HOUDINI_DISABLE_CPUID</code></p>
        <div class="content">


    <p >Obsolete control.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_mmx"
        data-title="houdini_disable_mmx"

    >
        <p class="label"><code>HOUDINI_DISABLE_MMX</code></p>
        <div class="content">


    <p >If set, disable MMX support for COPs and VEX. This also disables
    XMMX and SSE. This will reduce COPs processing speed by about 30%.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_xmmx"
        data-title="houdini_disable_xmmx"

    >
        <p class="label"><code>HOUDINI_DISABLE_XMMX</code></p>
        <div class="content">


    <p >If set, disable Extended MMX support for COPs and VEX. Extended
    MMX is implemented in the original Athlons and Pentium IIIs. This
    also disables SSE. This will reduce COPs processing speed by about
    20%.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_sse"
        data-title="houdini_disable_sse"

    >
        <p class="label"><code>HOUDINI_DISABLE_SSE</code></p>
        <div class="content">


    <p >If set, disable SSE support for COPs and VEX. SSE is implemented
    in Pentium IIIs and higher and Athlon XPs (not the original Athlons).
    This will reduce COPs processing speed by about 10%.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_3dnow"
        data-title="houdini_disable_3dnow"

    >
        <p class="label"><code>HOUDINI_DISABLE_3DNOW</code></p>
        <div class="content">


    <p >If set, disable 3DNow support for COPs and VEX. 3DNow is available in
    AMD Athlon and Cyrix CPUs. 3DNow is not used if the CPU supports SSE
    (which is any Athlon XP, MP, 64 or Opteron).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_avx"
        data-title="houdini_disable_avx"

    >
        <p class="label"><code>HOUDINI_DISABLE_AVX</code></p>
        <div class="content">


    <p >If set, disable use of AVX processor instructions (where available). AVX
    instructions are present starting with Intel Sandy Bridge (released Q1 2011)
    and AMD Bulldozer (released Q4 2011) processors.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_jemalloctest"
        data-title="houdini_disable_jemalloctest"

    >
        <p class="label"><code>HOUDINI_DISABLE_JEMALLOCTEST</code></p>
        <div class="content">


    <p >If set, disable the test to see if jemalloc has successfully been
    loaded.  On platforms that expect jemalloc, failure to link it
    will result in memory fragmentation and poor performance.  Thus,
    a warning will be printed.  However, it may be this is an intentional
    override, in which case setting this environment variable will
    suppress the warning.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_osx_swap_del_and_backspace"
        data-title="houdini_osx_swap_del_and_backspace"

    >
        <p class="label"><code>HOUDINI_OSX_SWAP_DEL_AND_BACKSPACE</code></p>
        <div class="content">


    <p >On Mac OS X, when this variable is set the meaning of the keyboard
    &#39;delete&#39; and &#39;backspace&#39; keys are interchanged.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_anonymous_statistics"
        data-title="houdini_anonymous_statistics"

    >
        <p class="label"><code>HOUDINI_ANONYMOUS_STATISTICS</code></p>
        <div class="content">


    <p >If set to 1, this will forcibly allow Houdini to gather and send anonymous
    usage statistics to help improve the product.  Setting to 0 will disable
    statistic collection.  The default of -1 will use the anonymous usage
    statistics settings in the preferences.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_anonymous_statistics_upload_errors"
        data-title="houdini_anonymous_statistics_upload_errors"

    >
        <p class="label"><code>HOUDINI_ANONYMOUS_STATISTICS_UPLOAD_ERRORS</code></p>
        <div class="content">


    <p >If set, Houdini will print errors to the console when Houdini encounters
    network or server errors when attempting to upload anonymous usage
    statistics.  By default, Houdini will not print anything if these errors
    occur.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_prompt_on_crashes"
        data-title="houdini_prompt_on_crashes"

    >
        <p class="label"><code>HOUDINI_PROMPT_ON_CRASHES</code></p>
        <div class="content">


    <p >If set to 0, Send Crash pop-up would never prompt but would send the crash
    log when HOUDINI_ANONYMOUS_STATISTICS is set to 1. Setting to 1 would always
    prompt Send Crash pop-up. The default of -1 uses current behavior.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_max_descriptors"
        data-title="houdini_max_descriptors"

    >
        <p class="label"><code>HOUDINI_MAX_DESCRIPTORS</code></p>
        <div class="content">


    <p >On Windows, specifies the maximum number of simultaneously open files at
    the stream I/O level.  On other platforms, please use the shell command
    (ulimit -n or limit) to set the file limit.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_stats_api_url"
        data-title="houdini_stats_api_url"

    >
        <p class="label"><code>HOUDINI_STATS_API_URL</code></p>
        <div class="content">


    <p >This variable controls which web URL Houdini sends anonymous usage
    statistics to.  The default value is <a href="http://www.sidefx.com/stats/api" class="link   None">http://www.sidefx.com/stats/api</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_show_custom_tools"
        data-title="houdini_show_custom_tools"

    >
        <p class="label"><code>HOUDINI_SHOW_CUSTOM_TOOLS</code></p>
        <div class="content">


    <p >If set to 1, the name of the custom tool will be included when used with
    anonymous statistics. The format will then be <code>&lt;name&gt;(custom_tool)</code> instead
    of just <code>(custom_tool)</code>. By default this is set to 0 (off).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_start_page_splash"
        data-title="houdini_no_start_page_splash"

    >
        <p class="label"><code>HOUDINI_NO_START_PAGE_SPLASH</code></p>
        <div class="content">


    <p >If set to 1, Houdini will not attempt to open the Start Here splash page
    or the page that asks permission to turn on anonymous usage statistics.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_case_sensitive_fs"
        data-title="houdini_case_sensitive_fs"

    >
        <p class="label"><code>HOUDINI_CASE_SENSITIVE_FS</code></p>
        <div class="content">


    <p >If set to 1, this causes Houdini to treat the file system as
    case-sensitive. This value defaults to 0 for Windows and Max OS X. For all
    other platforms, it defaults to 1.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_coredump"
        data-title="houdini_coredump"

    >
        <p class="label"><code>HOUDINI_COREDUMP</code></p>
        <div class="content">


    <p >Setting this environment variable to 1 is useful for debugging HDK crashes.
    On Unix systems, Houdini will attempt to dump a core file instead
    of simply exiting on the <code>SIGILL</code>, <code>SIGEMT</code>, <code>SIGBUS</code> or <code>SIGSEGV</code> signals.  Please
    see signal(5) for more information.  On Windows, this will enable just in
    time debugging for debuggers such as Visual Studio.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_env_file"
        data-title="houdini_no_env_file"

    >
        <p class="label"><code>HOUDINI_NO_ENV_FILE</code></p>
        <div class="content">


    <p >If set, Houdini will not load the <code>$HOUDINI_USER_PREF_DIR/houdini.env</code>
    file.  This allows large facilities with standard environments to disable
    the <code>houdini.env</code> file by setting this variable in the script which they use
    to launch Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_env_file_overrides"
        data-title="houdini_no_env_file_overrides"

    >
        <p class="label"><code>HOUDINI_NO_ENV_FILE_OVERRIDES</code></p>
        <div class="content">


    <p >This environment variable is similar to <code>HOUDINI_NO_ENV_FILE</code>, but is less
    extreme.  Setting this stops the user from being able to override existing
    variables in their <code>houdini.env</code> file.  If they try to do so, a warning will
    be printed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_legacy_menus"
        data-title="houdini_no_legacy_menus"

    >
        <p class="label"><code>HOUDINI_NO_LEGACY_MENUS</code></p>
        <div class="content">


    <p >When set, Houdini will not load the old MainMenuMaster,
    MaindMenuEscape, and MainMenuCommon menu files. It will only use the
    new MainMenuMaster.xml, MainMenuEscape.xml, and MainMenuCommon.xml.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dso_error"
        data-title="houdini_dso_error"

    >
        <p class="label"><code>HOUDINI_DSO_ERROR</code></p>
        <div class="content">


    <p >Determines if DSO/DLL errors on plug-ins will be printed out to
    the console.  This can help in debugging custom operators.</p>



    <p >By default this is disabled.</p>



    <p >The existence of the variable in the environment (or setting its
    value to 1) will cause dynamic linking errors to be output.</p>



    <p >Setting the value to 2 will cause more verbose errors to be printed.</p>



    <p >Setting the value to 3 will cause all DSO related messages to be printed.</p>



    <p >Setting the value to 4 will cause timing messages to be printed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dso_deepbind"
        data-title="houdini_dso_deepbind"

    >
        <p class="label"><code>HOUDINI_DSO_DEEPBIND</code></p>
        <div class="content">


    <p >Only applicable On Linux. If set to 1, then all dynamically loaded DSO will
    be loaded using <code>RTLD_DEEPBIND</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dso_exclude_pattern"
        data-title="houdini_dso_exclude_pattern"

    >
        <p class="label"><code>HOUDINI_DSO_EXCLUDE_PATTERN</code></p>
        <div class="content">


    <p >If set, this specifies a glob pattern that is used to exclude matching
    DSO/DLL files. The precise accepted syntax is as follows:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >If it begins with a &#39;/&#39;, then it matches at the beginning, else the
      pattern starts matching at any path component.</p>

    </li>



    <li class="bullet  ">


        <p class="label" ><code>*</code> matches any path component, but stops at slashes.</p>

    </li>



    <li class="bullet  ">


        <p class="label" ><code>**</code> matches anything, including slashes.</p>

    </li>



    <li class="bullet  ">


        <p class="label" ><code>?</code> matches any character except a slash (/).</p>

    </li>



    <li class="bullet  ">


        <p class="label" ><code>[...]</code> matches one of the enclosed characters, eg. <code>[abc]</code></p>

        <div class="content">

    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" ><code>-</code> within <code>[...]</code> denotes a character range, eg. <code>[a-c]</code></p>

    </li>



    <li class="bullet  ">


        <p class="label" >If first character after <code>[</code> is <code>!</code> or <code>^</code>, then it matches
        anything except the enclosed characters.</p>

    </li>

    </ul>

        </div>

    </li>



    <li class="bullet  ">


        <p class="label" ><code>{x,y}</code> matches the any of the comma(&#39;,&#39;) separated patterns within</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cpp_expand_pragma"
        data-title="houdini_cpp_expand_pragma"

    >
        <p class="label"><code>HOUDINI_CPP_EXPAND_PRAGMA</code></p>
        <div class="content">


    <p >Determines whether the C pre-processor will perform macro
    expansion on <code>#include</code>, <code>#sinclude</code>, and <code>#pragma</code> statements.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_undo_bug_notify"
        data-title="houdini_enable_undo_bug_notify"

    >
        <p class="label"><code>HOUDINI_ENABLE_UNDO_BUG_NOTIFY</code></p>
        <div class="content">


    <p >If set to 1, this environment variable enables verbose output for potential
    undo bugs as they occur in Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_tiff_bottomleft"
        data-title="houdini_tiff_bottomleft"

    >
        <p class="label"><code>HOUDINI_TIFF_BOTTOMLEFT</code></p>
        <div class="content">


    <p >Older versions of Houdini generated TIFF files with the first
    scanline of data representing the bottom of the image.  This
    control can be turned on to replicate the behavior of older
    versions of Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_tiff_sampleformat"
        data-title="houdini_tiff_sampleformat"

    >
        <p class="label"><code>HOUDINI_TIFF_SAMPLEFORMAT</code></p>
        <div class="content">


    <p >If set, the TIFF SAMPLEFORMAT tag will be output in all cases.
    This may cause older versions of the TIFF library to print
    warnings/errors about unknown tags.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_image_dso"
        data-title="houdini_disable_image_dso"

    >
        <p class="label"><code>HOUDINI_DISABLE_IMAGE_DSO</code></p>
        <div class="content">


    <p >If set, no custom image formats will be loaded.  Only built-in
    formats will be installed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_thread_image"
        data-title="houdini_thread_image"

    >
        <p class="label"><code>HOUDINI_THREAD_IMAGE</code></p>
        <div class="content">


    <p >If set, some old-style compositing operations will be
    multi-threaded.  On some platforms, this can provide a performance
    boost.  However, on other platforms, this can cause a performance
    hit.  This also affects Houdini applications like <code>ipaint</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_lminfo_verbose"
        data-title="houdini_lminfo_verbose"

    >
        <p class="label"><code>HOUDINI_LMINFO_VERBOSE</code></p>
        <div class="content">


    <p >Typically, Houdini will print out warnings at start-up time if
    licenses are due to expire shortly.  You can set this variable to change
    this behavior.</p>


    <div class="defs">



    <div id="0" class="def  ">
        <p class="label "><code>0</code>
        </p>
        <div class="content">

    <p >No warnings will be shown when applications start up.</p>

</div>
    </div>



    <div id="1-default" class="def  ">
        <p class="label "><code>1</code> (default)
        </p>
        <div class="content">

    <p >Warnings will only be shown in the terminal when applications start up.</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >Warnings will only be shown as graphical pop-ups when applications
        start up.</p>

</div>
    </div>



    <div id="3" class="def  ">
        <p class="label "><code>3</code>
        </p>
        <div class="content">

    <p >Warnings will be shown both in the terminal and as graphical pop-ups
        when applications start up.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nohkey"
        data-title="houdini_nohkey"

    >
        <p class="label"><code>HOUDINI_NOHKEY</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer and the license administrator
    when a license check fails.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nohkey_apprentice"
        data-title="houdini_nohkey_apprentice"

    >
        <p class="label"><code>HOUDINI_NOHKEY_APPRENTICE</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer but will cause it to immediately launch
    the license administrator when a license check fails.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nohkey_login"
        data-title="houdini_nohkey_login"

    >
        <p class="label"><code>HOUDINI_NOHKEY_LOGIN</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer and the license administrator but will
    cause it to launch a browser to <a href="https://www.sidefx.com/services/sesinetd" class="link   None">https://www.sidefx.com/services/sesinetd</a>
    and a message dialog asking users if they would like to retry checkout.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nohkey_login_relaunch"
        data-title="houdini_nohkey_login_relaunch"

    >
        <p class="label"><code>HOUDINI_NOHKEY_LOGIN_RELAUNCH</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer and the license administrator but will
    cause it to launch a browser to
    <a href="https://www.sidefx.com/services/sesinetd/?relaunch=true&username=USERNAME" class="link   None">https://www.sidefx.com/services/sesinetd/?relaunch=true&username=USERNAME</a></p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_curl_share"
        data-title="houdini_curl_share"

    >
        <p class="label"><code>HOUDINI_CURL_SHARE</code></p>
        <div class="content">


    <p >Allow curl to reshare already open connections, DNS caches and ssl sessions
    when possible.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_curl_ipversion"
        data-title="houdini_curl_ipversion"

    >
        <p class="label"><code>HOUDINI_CURL_IPVERSION</code></p>
        <div class="content">


    <p >Allows selecting what kind of IP address to use when resolving the host names.
    This is only interesting when using host names that resolve to addresses
    using more than one version of IP.</p>


    <div class="defs">



    <div id="0-default" class="def  ">
        <p class="label "><code>0</code> (default)
        </p>
        <div class="content">

    <p >Select either IPv4 or IPv6.</p>

</div>
    </div>



    <div id="1" class="def  ">
        <p class="label "><code>1</code>
        </p>
        <div class="content">

    <p >Select IPv6 only.</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >Select IPv4 only.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_asset_instantiation"
        data-title="houdini_no_asset_instantiation"

    >
        <p class="label"><code>HOUDINI_NO_ASSET_INSTANTIATION</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent Houdini from
    auto-instantiation when importing assets.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_jittery_camera"
        data-title="houdini_jittery_camera"

    >
        <p class="label"><code>HOUDINI_JITTERY_CAMERA</code></p>
        <div class="content">


    <p >Setting this environment variable will prevent the direct
    assignment of the camera transform to the GL view transform.  This
    will cause the camera to jitter in some cases.  It, however, fixes
    reversed-perspective problems with the ES Tornado 3000 video card.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_disable_auto_folding"
        data-title="houdini_vex_disable_auto_folding"

    >
        <p class="label"><code>HOUDINI_VEX_DISABLE_AUTO_FOLDING</code></p>
        <div class="content">


    <p >Disables a specific optimization in Mantra/VEX which tries to
    selectively retain parameters to the VEX code, so that the same
    optimized code can be re-used between multiple instances that have
    different parameter values. If this optimization is off, then any
    VEX code that is instantiated multiple times with different
    parameter values, will have each instance treated as a unique
    optimization.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_returnbyreference"
        data-title="houdini_vex_returnbyreference"

    >
        <p class="label"><code>HOUDINI_VEX_RETURNBYREFERENCE</code></p>
        <div class="content">


    <p >In very old code, VEX would allow functions that computed a single
    value to also pass the return value by reference (e.g. <code>sin(result,
    value)</code> instead of <code>result = sin(value)</code>).  This form of the function
    was marked as deprecated over 5 years ago and is now no longer allowed.
    Enabling this variable will re-instate the deprecated functions.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_profinfo_html"
        data-title="houdini_vex_profinfo_html"

    >
        <p class="label"><code>HOUDINI_VEX_PROFINFO_HTML</code></p>
        <div class="content">


    <p >If this variable is set, the VEX profiling information will be
    output using HTML instead of text.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_disable_instance_cache"
        data-title="houdini_vex_disable_instance_cache"

    >
        <p class="label"><code>HOUDINI_VEX_DISABLE_INSTANCE_CACHE</code></p>
        <div class="content">


    <p >Disables global caching of VEX shaders for the SOP and POP contexts so
    that shader-local data (such point clouds generated with <code>pcgenerate</code>)
    are regenerated with each cook of that operator.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_disable_jit"
        data-title="houdini_vex_disable_jit"

    >
        <p class="label"><code>HOUDINI_VEX_DISABLE_JIT</code></p>
        <div class="content">


    <p >Disables just-in-time compilation of VEX shader fragments to native
    machine code.  This variable is still used, but is deprecated in favor of
    HOUDINI_VEX_JIT_OPTIMIZE.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_jit_optimize"
        data-title="houdini_vex_jit_optimize"

    >
        <p class="label"><code>HOUDINI_VEX_JIT_OPTIMIZE</code></p>
        <div class="content">


    <p >Specify JIT optimizations for VEX compilation.  The string for this
    variable is a comma separated list of various options.  If the option is
    found in the string.  If the option token is found, the flag will be turned
    off.  The flag can be turned off by prefixing the token with &ldquo;no-&rdquo;.
    Alternatively, the value for the flag can be specified with the suffix
    &ldquo;=value&rdquo;.</p>


    <div class="defs">



    <div id="for-example" class="def  ">
        <p class="label ">For example
        </p>
        <div class="content">
    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >&ldquo;native&rdquo;:  Enable native JIT code generation</p>

    </li>



    <li class="bullet  ">


        <p class="label" >&ldquo;no-native&rdquo;:  Disable native JIT code generation</p>

    </li>



    <li class="bullet  ">


        <p class="label" >&ldquo;native=on&rdquo;:  Enable native JIT code generation</p>

    </li>



    <li class="bullet  ">


        <p class="label" >&ldquo;native=off&rdquo;:  Disable native JIT code generation</p>

    </li>

    </ul>
</div>
    </div>



    <div id="currently-the-following-options-are-recognized" class="def  ">
        <p class="label ">Currently the following options are recognized
        </p>
        <div class="content">
    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >&ldquo;cache&rdquo; - Enable JIT specialization cache (default ON)</p>

    </li>



    <li class="bullet  ">


        <p class="label" >&ldquo;native&rdquo; - Enable native JIT code generation (default ON)</p>

    </li>



    <li class="bullet  ">


        <p class="label" >&ldquo;global&rdquo; - Perform global optimization across import calls (default ON)</p>

    </li>

    </ul>
</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_assert"
        data-title="houdini_vex_assert"

    >
        <p class="label"><code>HOUDINI_VEX_ASSERT</code></p>
        <div class="content">


    <p >Sets the behavior for the VEX <code>assert_enabled()</code> function.  If the
    variable is set, the <code>assert_enabled()</code> function returns true.  This
    has the effect of enabling the <code>assert()</code> macro (defined in <code>assert.h</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_modulecachesize"
        data-title="houdini_vex_modulecachesize"

    >
        <p class="label"><code>HOUDINI_VEX_MODULECACHESIZE</code></p>
        <div class="content">


    <p >Sets the number of LLVM modules cached by VEX.  Each cached module consumes
    some memory, but can save re-compiles if the same shader is used multiple
    times.  A value of -1 indicates that the module cache will be unbounded.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_memorycachesize"
        data-title="houdini_vex_memorycachesize"

    >
        <p class="label"><code>HOUDINI_VEX_MEMORYCACHESIZE</code></p>
        <div class="content">


    <p >For efficiency, VEX has it’s own memory allocator.  This variable controls
    the cache size for in MB each VEX variable type.  The cache is split across
    threads, so machines with more cores may require larger cache sizes.  This
    typically comes into play when there are large arrays being processed in
    VEX.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_maxthreads"
        data-title="houdini_maxthreads"

    >
        <p class="label"><code>HOUDINI_MAXTHREADS</code></p>
        <div class="content">


    <p >Controls the maximum number of threads to use for
    compute-intensive operations in Houdini.</p>



    <p >The default of 0 means to use all available processors.</p>



    <p >Positive values will limit the number of threads that can be used.
    A value of 1 will disable multithreading entirely (limiting to
    only one thread).  Positive values will be clamped to the number
    of CPU cores available.</p>



    <p >If the value is negative, the value is added to the maximum number
    of processors to determine the threading limit.  For example, a
    value of -1 will use all CPU cores except 1.</p>



    <p >This control can be overridden by the <code>-j</code> option to most applications.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_maxspus"
        data-title="houdini_maxspus"

    >
        <p class="label"><code>HOUDINI_MAXSPUS</code></p>
        <div class="content">


    <p >Controls the maximum number of SPUs to use in Cell/BE releases of
    Houdini.  The default of -1 means to use all available SPU resources,
    while a value of 0 will disable SPU use entirely.  Positive values will
    clamp the number of SPUs that can be used.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_use_hfs_python"
        data-title="houdini_use_hfs_python"

    >
        <p class="label"><code>HOUDINI_USE_HFS_PYTHON</code></p>
        <div class="content">

    <div class="notices ind-group">





    <div class="notice ind-item note  ">
        <p class="label"><span class="g fa fa-fw fa-info-circle"></span>Note</p>
        <div class="content">


    <p >This variable is no longer used.</p>



    <p >Houdini defaults to loading the Python library that is shipped
        in <code>$HFS</code>.  You can instruct Houdini to load a different Python library
        by modifying the library search path in your operating system (Mac and
        Linux only).  You may want to do this if there are 3rd-party modules
        installed in a different Python distribution that you wish to make
        available in Houdini.</p>



    <p >On Linux set the <code>LD_LIBRARY_PATH</code> environment variable to include the
        directory containing the Python library before launching Houdini.</p>



    <p >For example, in a terminal you can run:</p>

<div class="code-container"><pre class='syntax '>export LD_LIBRARY_PATH=/path/to/python/lib

cd /opt/hfsX.Y.ZZZ
source ./houdini_setup

houdini
</pre></div>

    <p >You can alternatively set <code>LD_PRELOAD</code> instead of <code>LD_LIBRARY_PATH</code>
        if you want to load the Python library but not any unwanted libraries
        that are in the same directory.</p>



    <p >For example:</p>

<div class="code-container"><pre class='syntax '>export LD_PRELOAD=/path/to/python/lib/libpython2.7.so.1.0

cd /opt/hfsX.Y.ZZZ
source ./houdini_setup

houdini
</pre></div>

    <p >Similarly on Mac set the <code>DYLD_LIBRARY_PATH</code> environment variable to
        include the directory containing the Python framework library.  When
        using <code>DYLD_LIBRARY_PATH</code> you must launch the Houdini executable in the
        application bundle instead of the executable in <code>$HFS/bin</code>.</p>



    <p >For example, in the Houdini Terminal you can run:</p>

<div class="code-container"><pre class='syntax '>export DYLD_LIBRARY_PATH=/System/Library/Frameworks/Python.framework/Versions/2.7

$HFS/Applications/Houdini\ FX\ X.Y.ZZZ.app\Contents\MacOS\houdinifx
</pre></div>

    <p >You can alternatively set <code>DYLD_INSERT_LIBRARIES</code> instead of
        <code>DYLD_LIBRARY_PATH</code> to load the Python framework library.</p>



    <p >For example:</p>

<div class="code-container"><pre class='syntax '>export DYLD_INSERT_LIBRARIES=/System/Library/Frameworks/Python.framework/Versions/2.7/Python

$HFS/Applications/Houdini\ FX\ X.Y.ZZZ.app\Contents\MacOS\houdinifx
</pre></div>
        </div>
    </div>

</div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_python_version"
        data-title="houdini_python_version"

    >
        <p class="label"><code>HOUDINI_PYTHON_VERSION</code></p>
        <div class="content">

    <div class="notices ind-group">





    <div class="notice ind-item note  ">
        <p class="label"><span class="g fa fa-fw fa-info-circle"></span>Note</p>
        <div class="content">


    <p >This variable is no longer used.</p>


        </div>
    </div>

</div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_python_bin"
        data-title="houdini_python_bin"

    >
        <p class="label"><code>HOUDINI_PYTHON_BIN</code></p>
        <div class="content">

    <div class="notices ind-group">





    <div class="notice ind-item note  ">
        <p class="label"><span class="g fa fa-fw fa-info-circle"></span>Note</p>
        <div class="content">


    <p >This variable is no longer used.</p>



    <p >If you are loading a different Python library into Houdini (see note
        for <code>HOUDINI_USE_HFS_PYTHON</code>) and you need to additionally set the Python
        prefix path then instead of setting <code>HOUDINI_PYTHON_BIN</code>, set the
        <code>PYTHONHOME</code> environment variable.</p>


        </div>
    </div>

</div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_python_lib"
        data-title="houdini_python_lib"

    >
        <p class="label"><code>HOUDINI_PYTHON_LIB</code></p>
        <div class="content">

    <div class="notices ind-group">





    <div class="notice ind-item note  ">
        <p class="label"><span class="g fa fa-fw fa-info-circle"></span>Note</p>
        <div class="content">


    <p >This variable is no longer used.</p>



    <p >See the note for <code>HOUDINI_USE_HFS_PYTHON</code> for instructing Houdini
        to load a different Python library.</p>


        </div>
    </div>

</div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pythonwarnings"
        data-title="houdini_pythonwarnings"

    >
        <p class="label"><code>HOUDINI_PYTHONWARNINGS</code></p>
        <div class="content">


    <p >When set, this overrides the default Python 3 interpreter behavior for
    warnings (similar to the PYTHONWARNINGS environment variable used by the
    native Python interpreter). This value is directly added to
    <code>sys.warnoptions</code>.  Valid values are: <code>default</code>, <code>error</code>, <code>ignore</code>,
    <code>always</code>, <code>module</code>, <code>once</code>. For more information on what these values mean,
    please consult the Python warnings module documentation on filter actions.</p>



    <p >This variable is ignored on Python 2 builds.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_max_gl_version"
        data-title="houdini_ogl_max_gl_version"

    >
        <p class="label"><code>HOUDINI_OGL_MAX_GL_VERSION</code></p>
        <div class="content">


    <p >By default this is zero, indicating that Houdini should use all available
    features that the OpenGL driver provides. It can be set to any OpenGL
    version (major.minor, like &ldquo;2.1&rdquo;) and only those OpenGL features that were
    part of the OpenGL core at that version will be enabled.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_enable_texture_sequences"
        data-title="houdini_ogl_enable_texture_sequences"

    >
        <p class="label"><code>HOUDINI_OGL_ENABLE_TEXTURE_SEQUENCES</code></p>
        <div class="content">


    <p >Defining this variable enables the AGP texturing with large texture
    sequences, which may cause the X server seizing when the application quits
    (observed on nVidia cards with drivers 7174 and less). When this variable is
    not defined, Houdini deletes last raster texture before using a new one.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_dump_shader_errors"
        data-title="houdini_ogl_dump_shader_errors"

    >
        <p class="label"><code>HOUDINI_OGL_DUMP_SHADER_ERRORS</code></p>
        <div class="content">


    <p >If present, GLSL compilation errors will be dumped to the console when
    encountered. This should only be used for debugging purposes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_core_profile"
        data-title="houdini_ogl_core_profile"

    >
        <p class="label"><code>HOUDINI_OGL_CORE_PROFILE</code></p>
        <div class="content">


    <p >If set to 1, the OpenGL core profile will be used. On Windows and Linux,
    this can be set to 0 to use the OpenGL Compatibility profile to allow
    OpenGL 1.x and 2.x API calls and shaders. OSX does not offer the compatibility
    profile with a OpenGL 3.2+ context, so this variable has no effect on OSX
    (Core profile is always used on OSX). The default is 0 on Windows and
    Linux, and 1 on OSX. If a Compatibility profile fails to provide
    OpenGL 3.2 or higher, Houdini will attempt to use the core profile instead.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_retina"
        data-title="houdini_enable_retina"

    >
        <p class="label"><code>HOUDINI_ENABLE_RETINA</code></p>
        <div class="content">


    <p >If set to 0, turns off Houdini’s support for retina displays under OSX.
    This will cause Houdini to act as if the display has half the resolution
    it actually has, resulting in a slightly pixelated interface. The advantage
    is that Houdini will also use less Video RAM for buffers, and run fewer
    pixels through the OpenGL shader pipeline, resulting in slightly increased
    performance. Linux and Windows are not affected by this setting.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hip_from_path"
        data-title="houdini_hip_from_path"

    >
        <p class="label"><code>HOUDINI_HIP_FROM_PATH</code></p>
        <div class="content">


    <p >When loading <code>.hip</code> files, force the Houdini HIP variable to the
    path of the HIP file specified rather than the HIP variable set
    inside hip file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_set_pwd_to_hip"
        data-title="houdini_set_pwd_to_hip"

    >
        <p class="label"><code>HOUDINI_SET_PWD_TO_HIP</code></p>
        <div class="content">


    <p >When setting the HIP variable, set the current working directory of the
    application to that directory if this variable is set to 1. If set to
    zero, changing the value of Houdini’s HIP variable does not affect the
    application’s current working directory. The default value of this option
    is 1.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pathmap"
        data-title="houdini_pathmap"

    >
        <p class="label"><code>HOUDINI_PATHMAP</code></p>
        <div class="content">


    <p >This string defines multiple mappings represented as a
    Python-style dictionary.  Mappings can map one directory to
    another directory.  The key is the directory to map and the value
    represents the destination directory.  For example:</p>

<div class="code-container"><pre class='syntax '>{ &quot;c:/temp&quot;: &quot;/tmp&quot;, &quot;/mnt/render&quot;: &quot;//storage/share/render&quot; }
</pre></div>

    <p >would create two directory mappings.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_compare"
        data-title="houdini_compare"

    >
        <p class="label"><code>HOUDINI_COMPARE</code></p>
        <div class="content">


    <p >This string defines the command line to launch an external compare (diff)
    program. The following variables can be used when constructing the command
    line:</p>


    <div class="defs">



    <div id="oldpath" class="def  ">
        <p class="label "><code>&#34;$OLDPATH&#34;</code>
        </p>
        <div class="content">

    <p >The currently saved op type</p>

</div>
    </div>



    <div id="newpath" class="def  ">
        <p class="label "><code>&#34;$NEWPATH&#34;</code>
        </p>
        <div class="content">

    <p >The modified op type data</p>

</div>
    </div>



    <div id="oldtitle" class="def  ">
        <p class="label "><code>&#34;$OLDTITLE&#34;</code>
        </p>
        <div class="content">

    <p >A title to use for the saved op type data instead of the temp file
        name (if your favorite differ supports this)</p>

</div>
    </div>



    <div id="newtitle" class="def  ">
        <p class="label "><code>&#34;$NEWTITLE&#34;</code>
        </p>
        <div class="content">

    <p >A title to use for the saved modified op type data instead of the temp
        file name (if your favorite differ supports this)</p>

</div>
    </div>

    </div>


    <p >Use quotes generously to avoid problems with spaces.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hip_default_name"
        data-title="houdini_hip_default_name"

    >
        <p class="label"><code>HOUDINI_HIP_DEFAULT_NAME</code></p>
        <div class="content">


    <p >The default <code>.hip</code> file name.  This defaults to &ldquo;untitled.hip&rdquo; and
    is used to initialize the HIP filename when starting a new Houdini
    session.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_default_renderers"
        data-title="houdini_default_renderers"

    >
        <p class="label"><code>HOUDINI_DEFAULT_RENDERERS</code></p>
        <div class="content">


    <p >This variable provides a comma separated list of renderer(s) to use,
    overriding the preferences entirely. The format of the names should be
    the same as the <code>render.activelist.val</code> value in <code>$HIH/houdini.prefs</code>.
    Renderers enabled through this variable cannot be turned off through the
    preferences dialog.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_view_rman"
        data-title="houdini_view_rman"

    >
        <p class="label"><code>HOUDINI_VIEW_RMAN</code></p>
        <div class="content">


    <p >This variable specifies the command to run when &ldquo;View: RMan&rdquo; is
    chosen from the viewport rendering menu.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_default_rib_renderer"
        data-title="houdini_default_rib_renderer"

    >
        <p class="label"><code>HOUDINI_DEFAULT_RIB_RENDERER</code></p>
        <div class="content">


    <p >This variable is used in the creation script of the RIB output
    driver to create parameters appropriate for a particular RIB
    renderer.  See <code>$HH/scripts/out/targets</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ribshader_dir"
        data-title="houdini_ribshader_dir"

    >
        <p class="label"><code>HOUDINI_RIBSHADER_DIR</code></p>
        <div class="content">


    <p >This variable specifies the directory where Houdini should put RenderMan
    shaders compiled from VOP Networks. The default is <code>$HOUDINI_TEMP_DIR</code>.
    Only the compiled shader is placed in this directory. The source code
    for the shader is always put in <code>$HOUDINI_RIBTEMP_DIR</code> or <code>$HOUDINI_TEMP_DIR</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ribtemp_dir"
        data-title="houdini_ribtemp_dir"

    >
        <p class="label"><code>HOUDINI_RIBTEMP_DIR</code></p>
        <div class="content">


    <p >This variable specifies the directory where Houdini should put RenderMan
    intermediate (i.e. source and error) files while generating compiled
    shaders from VOP Networks.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_thumb_render"
        data-title="houdini_thumb_render"

    >
        <p class="label"><code>HOUDINI_THUMB_RENDER</code></p>
        <div class="content">


    <p >This provides a default value for the -r option of the <code>thumbrender</code>
    application.  This application is used to render thumbnails for
    the SHOP palette.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_view_mantra"
        data-title="houdini_view_mantra"

    >
        <p class="label"><code>HOUDINI_VIEW_MANTRA</code></p>
        <div class="content">


    <p >This variable specifies the command to run when &ldquo;View: Mantra&rdquo; is
    chosen from the viewport rendering menu.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_export_rename"
        data-title="houdini_disable_export_rename"

    >
        <p class="label"><code>HOUDINI_DISABLE_EXPORT_RENAME</code></p>
        <div class="content">


    <p >This variable disables the immediate recooking of exported CHOPs whenever
    a new node is created or when an existing node is renamed. For example,
    if you have a chop that is exporting to <code>/obj/geo*</code>, then it requires
    recooking if an object is renamed from <code>/obj/foo</code> to <code>/obj/geo1</code>. To disable
    this behavior, set this environment variable to 1.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_http_noproxy"
        data-title="houdini_http_noproxy"

    >
        <p class="label"><code>HOUDINI_HTTP_NOPROXY</code></p>
        <div class="content">


    <p >This variable control the list of connection url that should not go through
    a proxy if a proxy is setup. The default is <code>localhost,127.0.0.1</code>. Note this
    variable is used in favour of the system NO_PROXY environment variable. See
    libcurl CURLOPT_NOPROXY for more details.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_http_proxy"
        data-title="houdini_http_proxy"

    >
        <p class="label"><code>HOUDINI_HTTP_PROXY</code></p>
        <div class="content">


    <p >This variable control the proxy URL that should be used when making HTTP(s)
    requests. Note this variable should be used when sidefx products should be
    using a different proxy from the rest of the system. This variable is
    used in favour of the system environment varialbe HTTP_PROXY and
    HTTPS_PROXY. See libcurl CURLOPT_PROXY for more details.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_force_ray"
        data-title="mantra_force_ray"

    >
        <p class="label"><code>MANTRA_FORCE_RAY</code></p>
        <div class="content">


    <p >Force mantra to use raytracing (same as <code>-r</code> option)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_engine_procedural"
        data-title="mantra_engine_procedural"

    >
        <p class="label"><code>MANTRA_ENGINE_PROCEDURAL</code></p>
        <div class="content">


    <p >Specifies the default behavior for enabling the engine procedural in
    mantra.  If the <code>-e</code> command line option isn’t specified on the command line,
    this setting determines how the engine procedural will enabled.  Currently,
    the different possible values are &ldquo;none&rdquo;, &ldquo;basic&rdquo; or &ldquo;full&rdquo;.  Note that
    &ldquo;full&rdquo; will cause mantra to consume an Engine license (not a Render
    license).</p>



    <p >Specifying the <code>-e</code> option on the mantra command line overrides this variable.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_disable_fogbox"
        data-title="mantra_disable_fogbox"

    >
        <p class="label"><code>MANTRA_DISABLE_FOGBOX</code></p>
        <div class="content">


    <p >When rendering fog, mantra will create a matte shaded
    object automatically so the fog will be picked up in the
    background.  Setting this variable disables this feature.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_nonrat_error"
        data-title="mantra_nonrat_error"

    >
        <p class="label"><code>MANTRA_NONRAT_ERROR</code></p>
        <div class="content">


    <p >Normally, mantra will automatically convert texture files that are not
    in <code>.rat</code> format to <code>.rat</code> format internally - which can slow down render
    startup.  To disable automatic conversion to <code>.rat</code> format and instead
    print out an error when textures are not in the native format, set this
    variable.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_vector_bind_mode"
        data-title="mantra_vector_bind_mode"

    >
        <p class="label"><code>MANTRA_VECTOR_BIND_MODE</code></p>
        <div class="content">


    <p >When binding texture attributes to VEX shader parameters, mantra checks
    whether the size of the geometry attribute (<code>float[2]</code> (UV) or
    <code>float[3]</code> (UVW)) matches the size of the parameter type (<code>vector2</code> or
    <code>vector</code>).</p>



    <p >By default, mantra allows the two sizes to NOT match, and either fills in
    or discards the extra (W) value. You can set this variable to change this
    behavior.</p>


    <div class="defs">



    <div id="0" class="def  ">
        <p class="label "><code>0</code>
        </p>
        <div class="content">

    <p >Strict mode: mantra does not bind attributes to parameters if they
        have different sizes.</p>

</div>
    </div>



    <div id="1" class="def  ">
        <p class="label "><code>1</code>
        </p>
        <div class="content">

    <p >Upsize mode: mantra will allow <code>float[2]</code> attributes to bind to
        <code>vector</code> parameters (setting the third component to 0), but
        does not bind <code>float[3]</code> to <code>vector2</code>.</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >Downsize mode: mantra will allow <code>float[3]</code> attributes to bind to
        <code>vector2</code> parameters (discarding the third component), but does not
        bind <code>float[2]</code> to <code>vector</code>.</p>

</div>
    </div>



    <div id="3-default" class="def  ">
        <p class="label "><code>3</code> (default)
        </p>
        <div class="content">

    <p >Lenient mode: mantra will bind <code>float[2]</code> attributes to <code>vector</code>
        parameters, and <code>float[3]</code> attributes to <code>vector2</code> parameters,
        filling in or discarding the extra component as necessary.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_linear_creases"
        data-title="mantra_linear_creases"

    >
        <p class="label"><code>MANTRA_LINEAR_CREASES</code></p>
        <div class="content">


    <p >Revert to the subdivision crease algorithm used in Houdini 12.5 and
    earlier.  Subdivision creases in mantra now use Pixar-style creasing
    for Houdini 13 and later.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rman_include_fix"
        data-title="houdini_rman_include_fix"

    >
        <p class="label"><code>HOUDINI_RMAN_INCLUDE_FIX</code></p>
        <div class="content">


    <p >Setting this variable will cause the order of pre/post includes to
    be different when generating RIB.  This allows for proper motion
    blur of RiReadArchive geometry read using the include files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mi_disable_flip_rmap"
        data-title="houdini_mi_disable_flip_rmap"

    >
        <p class="label"><code>HOUDINI_MI_DISABLE_FLIP_RMAP</code></p>
        <div class="content">


    <p >When auto-generating reflection maps for MentalRay, one of the
    images is flipped by default.  Setting this variable will turn the
    flipping off.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_soho_spooling"
        data-title="houdini_disable_soho_spooling"

    >
        <p class="label"><code>HOUDINI_DISABLE_SOHO_SPOOLING</code></p>
        <div class="content">


    <p >When this variable is defined, interactive rendering from within
    Houdini will send data directly to the renderer over a pipe rather than
    first saving it to a temporary file and then spooling it to the
    renderer in a separate thread.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mmb_pan"
        data-title="houdini_mmb_pan"

    >
        <p class="label"><code>HOUDINI_MMB_PAN</code></p>
        <div class="content">


    <p >When this variable is defined, the mouse buttons are remapped so that the
    left button tumbles, middle mouse pans, and right mouse button zooms.
    This is the setting used in Houdini version 8.1 and earlier.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_save_thumb"
        data-title="houdini_disable_save_thumb"

    >
        <p class="label"><code>HOUDINI_DISABLE_SAVE_THUMB</code></p>
        <div class="content">


    <p >Disable saving of thumb-nails in <code>.hip</code> files.  This makes .hip
    files smaller and faster to save/load.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_coredump"
        data-title="houdini_ui_coredump"

    >
        <p class="label"><code>HOUDINI_UI_COREDUMP</code></p>
        <div class="content">


    <p >Prevent Houdini from trying to saving a <code>.hip</code> file when a crash is
    detected.  Instead, Houdini will simply crash.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_use_radialmenu_masks"
        data-title="houdini_ui_use_radialmenu_masks"

    >
        <p class="label"><code>HOUDINI_UI_USE_RADIALMENU_MASKS</code></p>
        <div class="content">


    <p >Controls if a mask is used for drawing the radial menus.  This is required
    on some window managers that don’t handle transparency, so is 1 by default
    for Linux.   But other window managers don’t work well with the mask
    and leave garbage behind, so this can be set to 0 for those systems.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_hud"
        data-title="houdini_disable_hud"

    >
        <p class="label"><code>HOUDINI_DISABLE_HUD</code></p>
        <div class="content">


    <p >Disable the HUD, or the screen overlay shown in the viewport. This option
    can be used when the window manager on Linux doesn’t handle transparency
    properly, leaving the 3D viewport black as a result. Defaults to 0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_user_pref_dir"
        data-title="houdini_user_pref_dir"

    >
        <p class="label"><code>HOUDINI_USER_PREF_DIR</code></p>
        <div class="content">


    <p >The directory to store user preference files. The value of this variable
    must include the substring <code>__HVER__</code>, which will be replaced at run time
    with the current <code>MAJOR.MINOR</code> version string. On Windows and Linux, this
    defaults to the expanded value of <code>$HOME/houdini__HVER__</code>. On Mac OSX, it
    will also use this default if the directory exists, else it uses the
    expanded value of <code>$HOME/Library/Preferences/houdini/__HVER__</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_fps_scale"
        data-title="houdini_enable_fps_scale"

    >
        <p class="label"><code>HOUDINI_ENABLE_FPS_SCALE</code></p>
        <div class="content">


    <p >If enabled, it will stretch all keys in your animation so that the time
    at the start of the last keyframe is the total animation length when you
    change the frame rate of your animation. Usually, when you change your
    animation frame rate, the last keyframe will end up at a fractional
    keyframe of your new frame rate because each frame in Houdini is actually
    a (1/FPS) seconds in length. Note that when you do this, the actual timing
    of your animation will be changed when you modify your frame rate.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_tablet"
        data-title="houdini_enable_tablet"

    >
        <p class="label"><code>HOUDINI_ENABLE_TABLET</code></p>
        <div class="content">


    <p >Enable Wacom tablet support on Linux and Windows. This defaults to 1.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_3dmouse"
        data-title="houdini_enable_3dmouse"

    >
        <p class="label"><code>HOUDINI_ENABLE_3DMOUSE</code></p>
        <div class="content">


    <p >Enable 3D mouse support. This defaults to 1.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_use_native_file_chooser"
        data-title="houdini_use_native_file_chooser"

    >
        <p class="label"><code>HOUDINI_USE_NATIVE_FILE_CHOOSER</code></p>
        <div class="content">


    <p >This variable controls whether Houdini will use the file chooser dialogs
    provided by the operating system. By default Houdini will try to use them,
    but only on platforms on which Houdini supports native file choosers. If
    this variable is set to 0, Houdini will use own file browser dialogs. There
    are three levels that this variable can specify.</p>


    <div class="defs">



    <div id="0" class="def  ">
        <p class="label "><code>0</code>
        </p>
        <div class="content">

    <p >Only use Houdini’s own file choosers. This is the default behavior.</p>

</div>
    </div>



    <div id="1" class="def  ">
        <p class="label "><code>1</code>
        </p>
        <div class="content">

    <p >Houdini and MPlay will use native file choosers for their File &gt; Open…
        items in their main menus. For any other file browsing, Houdini will use
        own file choosers.</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >If possible, Houdini will use native file choosers for browsing any
        file.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_max_file_history"
        data-title="houdini_max_file_history"

    >
        <p class="label"><code>HOUDINI_MAX_FILE_HISTORY</code></p>
        <div class="content">


    <p >This variable controls the maximum number of items kept in the recent files
    history lists. Its value can range from 1 to 64 inclusively.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_x11_synchronous"
        data-title="houdini_x11_synchronous"

    >
        <p class="label"><code>HOUDINI_X11_SYNCHRONOUS</code></p>
        <div class="content">


    <p >Force Unix X11 servers to be synchronous. If enabled, this may affect
    performance by slowing down redraws.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_view_metacam"
        data-title="houdini_view_metacam"

    >
        <p class="label"><code>HOUDINI_VIEW_METACAM</code></p>
        <div class="content">


    <p >Obsolete control.</p>



    <p >Used to specify Houdini digital assets lockable to the view. Please, use the
    desired light or a camera as a &ldquo;Representative&rdquo; operator for the HDA,
    which can be specified in the Basic tab of the asset properties.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_skip_name"
        data-title="houdini_skip_name"

    >
        <p class="label"><code>HOUDINI_SKIP_NAME</code></p>
        <div class="content">


    <p >Avoid printing viewport name in Houdini</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_top_pos_single_pass"
        data-title="houdini_top_pos_single_pass"

    >
        <p class="label"><code>HOUDINI_TOP_POS_SINGLE_PASS</code></p>
        <div class="content">


    <p >Set this environment variable to force only a single pass for
    drawing the wireframe outside of stamped projections in the
    TOP texture positioner view.  Otherwise multiple passes are used
    to only draw the frame outside of the stamped projection.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_iplay_ip"
        data-title="houdini_iplay_ip"

    >
        <p class="label"><code>HOUDINI_IPLAY_IP</code></p>
        <div class="content">


    <p >Force &ldquo;ip&rdquo; image device to use <code>iplay</code> instead of <code>mplay</code>.  This
    behavior can be overridden using the <code>HOUDINI_IP_COMMAND</code> and
    <code>HOUDINI_IP_COMMAND_FLIP</code> controls.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_console_lines"
        data-title="houdini_console_lines"

    >
        <p class="label"><code>HOUDINI_CONSOLE_LINES</code></p>
        <div class="content">


    <p >Number of lines to store in the Windows console</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_console_flags"
        data-title="houdini_console_flags"

    >
        <p class="label"><code>HOUDINI_CONSOLE_FLAGS</code></p>
        <div class="content">


    <p >The flags to control what is included in console output. Including the date
    is the default for this option.</p>


    <div class="defs">



    <div id="t" class="def  ">
        <p class="label "><code>t</code>
        </p>
        <div class="content">

    <p >Include the thread number the log entry came from.</p>

</div>
    </div>



    <div id="d" class="def  ">
        <p class="label "><code>d</code>
        </p>
        <div class="content">

    <p >Include the date the log entry came from.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="hscript_no_history"
        data-title="hscript_no_history"

    >
        <p class="label"><code>HSCRIPT_NO_HISTORY</code></p>
        <div class="content">


    <p >If this variable is defined, the script applications (<code>hython</code> and
    <code>hbatch</code>) and script panes will not store the line history. They will use
    standard input directly.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_interrupt_thresh"
        data-title="houdini_interrupt_thresh"

    >
        <p class="label"><code>HOUDINI_INTERRUPT_THRESH</code></p>
        <div class="content">


    <p >Timeout in seconds before the interrupt dialog appears to interrupt long
    operations.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_realtime_interrupt_thresh"
        data-title="houdini_realtime_interrupt_thresh"

    >
        <p class="label"><code>HOUDINI_REALTIME_INTERRUPT_THRESH</code></p>
        <div class="content">


    <p >Timeout in tenths-of-a-second before the Escape key will interrupt a
    short operation.  This avoids escape canceling near-interactive
    operations.  Zero will allow escape to interrupt at any time.  Two
    will prevent Escape from interrupting in the first 100ms to 200ms.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_tex3d_usage"
        data-title="houdini_tex3d_usage"

    >
        <p class="label"><code>HOUDINI_TEX3D_USAGE</code></p>
        <div class="content">


    <p >Amount of memory used by 3D texture maps in VEX.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_usage"
        data-title="houdini_rat_usage"

    >
        <p class="label"><code>HOUDINI_RAT_USAGE</code></p>
        <div class="content">


    <p >Amount of memory used by RAT textures in Houdini and renders.
    This amount is specified in mega-bytes.  For example, setting the
    control to 32 will limit Houdini/Mantra to use 32 Mb of RAM for
    RAT file texturing.  This is deprecated in favour of HOUDINI_RAT_MEMORY.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_memory"
        data-title="houdini_rat_memory"

    >
        <p class="label"><code>HOUDINI_RAT_MEMORY</code></p>
        <div class="content">


    <p >The fraction of total memory used by RAT textures in Houdini and renders.
    This amount is specified as the percentage of memory to reserve.  For
    example, setting this to 25 on a system with 64 GB would cap texture usage
    at 16 GB.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_files"
        data-title="houdini_rat_files"

    >
        <p class="label"><code>HOUDINI_RAT_FILES</code></p>
        <div class="content">


    <p >The maximum number of system files held open by the Houdini texture
    engine for rendering or other applications.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_streams_per_file"
        data-title="houdini_rat_streams_per_file"

    >
        <p class="label"><code>HOUDINI_RAT_STREAMS_PER_FILE</code></p>
        <div class="content">


    <p >Normally the Houdini texture engine allows each thread to independently
    access texture files.  This normally improves performance (sometimes quite
    significantly) but uses multiple system file handles per texture file.  In
    some scenes with extremely large numbers of separate texture files this
    may cause thrashing of the file cache.  This variable allows you to limit
    the number of simultaneous system file handles that are open for each
    texture.  If the value is 0 or less, there will be no limit on the number
    of streams per file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_localcache"
        data-title="houdini_rat_localcache"

    >
        <p class="label"><code>HOUDINI_RAT_LOCALCACHE</code></p>
        <div class="content">


    <p >Specifies the size of the local texture disk cache in MB.</p>



    <p >When texture are stored on network drives, and there are more
    textures than will fit in memory (i.e. there’s texture cache
    thrashing), setting a local disk cache will cause discarded tiles
    to be written to a local disk file rather than having to be
    re-fetched over the network.  This may improve performance on
    heavily loaded networks.</p>



    <p >The cache file is created in <code>HOUDINI_TEMP_DIR</code> (which should have
    enough space to store the cache file).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_optimize_bandwidth"
        data-title="houdini_rat_optimize_bandwidth"

    >
        <p class="label"><code>HOUDINI_RAT_OPTIMIZE_BANDWIDTH</code></p>
        <div class="content">


    <p >When textures are stored on network drives, Houdini/Mantra can
    attempt to optimize data transfer over the network.  This control
    can be used enable/disable this behavior.  The default behavior
    is to perform bandwidth optimization.</p>



    <p >This feature may not be supported on all operating systems.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rat_version"
        data-title="houdini_rat_version"

    >
        <p class="label"><code>HOUDINI_RAT_VERSION</code></p>
        <div class="content">


    <p >The version of .rat files to write when creating new files.  Houdini 18.5
    and earlier can only read v1.0 .rat files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ptex_usage"
        data-title="houdini_ptex_usage"

    >
        <p class="label"><code>HOUDINI_PTEX_USAGE</code></p>
        <div class="content">


    <p >Amount of memory used by <code>.ptx</code> textures in Houdini and renders.
    This amount is specified in mega-bytes.  For example, setting the
    control to 32 will limit Houdini/Mantra to use 32 MB of RAM for
    <code>.ptex</code> files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ptex_files"
        data-title="houdini_ptex_files"

    >
        <p class="label"><code>HOUDINI_PTEX_FILES</code></p>
        <div class="content">


    <p >Maximum number of files held open by the <code>ptexture</code> library in
    Houdini and renders.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ptex_winding"
        data-title="houdini_ptex_winding"

    >
        <p class="label"><code>HOUDINI_PTEX_WINDING</code></p>
        <div class="content">


    <p >Controls the expected orientation of <code>ptexture</code> faces.  Setting the
    value to 1 will swap the u and v coordinate from the standard
    Houdini format, which is typically the expected orientation from
    other software packages.  When 1 you won’t have to swap uv’s in
    shaders or SOPs.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_uvenlarger_diffuse_wrap"
        data-title="houdini_uvenlarger_diffuse_wrap"

    >
        <p class="label"><code>HOUDINI_UVENLARGER_DIFFUSE_WRAP</code></p>
        <div class="content">


    <p >When set to 1, <code>Diffuse Fill</code> UDIM Post Process in Bake Texture will wrap
    diffusion across 0-1 boundaries, which can be help reduce visible seams if
    an edge of a polygon is touching the boundary in UV space, and texture is
    sampled at higher mipmap level with wrapped texture filter.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mdisplay_wait_time"
        data-title="houdini_mdisplay_wait_time"

    >
        <p class="label"><code>HOUDINI_MDISPLAY_WAIT_TIME</code></p>
        <div class="content">


    <p >Number of seconds to wait before deciding that <code>iplay</code> could not be started.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_override_xres"
        data-title="houdini_override_xres"

    >
        <p class="label"><code>HOUDINI_OVERRIDE_XRES</code></p>
        <div class="content">


    <p >Specifies the horizontal resolution of your monitor in pixels.
    Houdini will not create any windows wider than the value specified
    here. You can use this value to force Houdini to only use a
    portion of your screen.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_override_yres"
        data-title="houdini_override_yres"

    >
        <p class="label"><code>HOUDINI_OVERRIDE_YRES</code></p>
        <div class="content">


    <p >Specifies the vertical resolution of your monitor in pixels.
    Houdini will not create any windows taller than the value specified
    here. You can use this value to force Houdini to only use a
    portion of your screen.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_uiscale"
        data-title="houdini_uiscale"

    >
        <p class="label"><code>HOUDINI_UISCALE</code></p>
        <div class="content">


    <p >This specifies a fixed scale factor to adjust the dots-per-inch
    Houdini uses for displaying ui.  A value of 100 will provide the
    default of 85 dpi.  A value of 200 will have all fonts and icons
    twice that size, and 50 will make them half that size.  A value of
    -1 will cause the dpi to be calculated from the monitor’s
    dimensions and resolution, or by <code>HOUDINI_OVERRIDE_*</code>.</p>



    <p >By default the value is 100.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_script_debug"
        data-title="houdini_script_debug"

    >
        <p class="label"><code>HOUDINI_SCRIPT_DEBUG</code></p>
        <div class="content">


    <p >If set, errors will be printed when loading dialog scripts and
    scripted operators.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_debug"
        data-title="houdini_image_debug"

    >
        <p class="label"><code>HOUDINI_IMAGE_DEBUG</code></p>
        <div class="content">


    <p >If set, some image formats will be more verbose about errors encountered
    when saving/loading images.  It’s possible that many false positives will
    be reported with this setting turned on, so it’s not recommended to have
    this enabled by default.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_targa_linear"
        data-title="houdini_targa_linear"

    >
        <p class="label"><code>HOUDINI_TARGA_LINEAR</code></p>
        <div class="content">


    <p >Houdini defaults TARGA images to sRGB color space.  However, older
    versions of Houdini expected TARGA format to be in linear space.  Setting
    this variable will change the default color space for TARGA images to
    linear.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_oiio_exr"
        data-title="houdini_oiio_exr"

    >
        <p class="label"><code>HOUDINI_OIIO_EXR</code></p>
        <div class="content">


    <p >Give the experimental OpenImageIO plugin to read/write .exr images.
    This plug-in is early access to work in progress, but supports multi-part
    EXR images.  It currently does not support deep images.  Even with this
    variable set, the Houdini classic EXR plugin will be used to read/write
    deep images.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_oiio_dds"
        data-title="houdini_oiio_dds"

    >
        <p class="label"><code>HOUDINI_OIIO_DDS</code></p>
        <div class="content">


    <p >Use the DDS loader built into OpenImageIO for loading DDS files when non-zero.
    By default this is disabled on Windows to use the built-in DirectXTex
    loader.  On other platforms, this is enabled by default but the OpenImageIO
    plugin only has 8b support and no export support. This can be disabled on
    non-Windows OSes to allow an external HDK plugin to load DDS files instead.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_exr_texture"
        data-title="houdini_enable_exr_texture"

    >
        <p class="label"><code>HOUDINI_ENABLE_EXR_TEXTURE</code></p>
        <div class="content">


    <p >When enabled (default on) this allows Houdini to access .exr files directly
    for texture evaluation.  This process falls back to use OpenImageIO to do
    texture evaluation.  Disabling this will cause .exr files to be converted
    internally to .rat files for more efficient texture access.  There is a
    cost (time and memory) to converting to .rat files.</p>



    <p >Please note you can use <code>OPENIMAGEIO_IMAGECACHE_OPTIONS</code> to configure
    OpenImageIO texture cache options.  For example:</p>

<div class="code-container"><pre class='syntax '>OPENIMAGEIO_IMAGECACHE_OPTIONS=max_memory_MB=512.0,max_open_files=50
</pre></div>
        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_texture_compress"
        data-title="houdini_texture_compress"

    >
        <p class="label"><code>HOUDINI_TEXTURE_COMPRESS</code></p>
        <div class="content">


    <p >When Houdini converts non-RAT texture maps to .rat files internally, this
    tells Houdini whether to compress the texture images or whether to leave
    the images uncompressed.  There’s a run-time cost to compression, but this
    can result in memory savings.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_color_manager"
        data-title="houdini_color_manager"

    >
        <p class="label"><code>HOUDINI_COLOR_MANAGER</code></p>
        <div class="content">


    <p >The color manager used by Houdini.  A value of 0 will use Houdini’s
    built-in color management. A value of 1 will use OpenColorIO for color
    management.  This is used in several places throughout Houdini including
    the VEX texture function (when reading sRGB images) and the imaketx
    utility.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_script_license"
        data-title="houdini_script_license"

    >
        <p class="label"><code>HOUDINI_SCRIPT_LICENSE</code></p>
        <div class="content">


    <p >This variable is primarily used to determine which license should be
    used when using the hou module from a standard python shell.  The
    license will determine which features are available in the hou module.
    It is recommended that you set this variable with os.environ, but you must
    do so before importing the hou module.</p>



    <p >Note that <code>hython</code> and <code>hbatch</code> will also use this variable.  The <code>hbatch</code>
    and <code>hython</code> options will override this variable, though.</p>


    <div class="defs">



    <div id="possible-values-of-the-variable-are-hbatch" class="def  ">
        <p class="label ">Possible values of the variable are:
    <code>&#34;hbatch&#34;</code>
        </p>
        <div class="content">

    <p >Access to all of Houdini.  Checks out for a Houdini Batch license,
        and if one could not be found, checks out an Houdini Master license.</p>

</div>
    </div>



    <div id="hbatch-r" class="def  ">
        <p class="label "><code>&#34;hbatch -R&#34;</code>
        </p>
        <div class="content">

    <p >Same as <code>&#34;hbatch&#34;</code>, but only checks for a Houdini Batch license.
        See the -R option in <code>hbatch</code> for more information.</p>

</div>
    </div>



    <div id="hscriptexper" class="def  ">
        <p class="label "><code>&#34;hscriptexper&#34;</code>
        </p>
        <div class="content">

    <p >Access to all of Houdini, including the experimental parts.  It uses a
        Houdini Master Experimental license.</p>

</div>
    </div>



    <div id="hescape" class="def  ">
        <p class="label "><code>&#34;hescape&#34;</code>
        </p>
        <div class="content">

    <p >Access to all the nodes that Houdini Escape has access to.  uses
        a Houdini Escape license.</p>

</div>
    </div>



    <div id="hescape-p" class="def  ">
        <p class="label "><code>&#34;hescape -p&#34;</code>
        </p>
        <div class="content">

    <p >Access to all the nodes that Houdini Escape has access to, plus the
        third party rendering nodes.  Uses a Houdini Escape license and
        a Plus license.</p>

</div>
    </div>



    <div id="pdg" class="def  ">
        <p class="label "><code>&#34;pdg&#34;</code>
        </p>
        <div class="content">

    <p >Access to only the TOP nodes.  It uses a PDG license if available.
        Automatically loads the pdg python module.</p>

</div>
    </div>

    </div>


    <p >This option has been deprecated in favor of the new licensing system
    environment variables. This option will be removed in a later version.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rman_curve_step"
        data-title="houdini_rman_curve_step"

    >
        <p class="label"><code>HOUDINI_RMAN_CURVE_STEP</code></p>
        <div class="content">


    <p >Obsolete control.
    Overrides the step size when writing RiCurve primitives for RIB.  This
    is obsolete and may be removed in future versions.  It has been replaced
    by the <code>ri_curvestep</code> detail integer attribute.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_alembic_indexed_arrays"
        data-title="houdini_disable_alembic_indexed_arrays"

    >
        <p class="label"><code>HOUDINI_DISABLE_ALEMBIC_INDEXED_ARRAYS</code></p>
        <div class="content">


    <p >Disable saving string attributes as Alembic indexed arrays.  By
    default, Houdini will save strings as indexed attributes in cases
    where it makes sense.  This option will disable this feature.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_alembic_ogawa_streams"
        data-title="houdini_alembic_ogawa_streams"

    >
        <p class="label"><code>HOUDINI_ALEMBIC_OGAWA_STREAMS</code></p>
        <div class="content">


    <p >When doing threaded processing on Alembic Archives, use this many
    streams. The default of zero lets Houdini pick the optimal number, and
    1 disables threaded processing of Alembic archives. Higher values enable
    threading but cause more open files, so it should generally not be set
    higher than the processor count.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_bias_normal"
        data-title="mantra_bias_normal"

    >
        <p class="label"><code>MANTRA_BIAS_NORMAL</code></p>
        <div class="content">


    <p >Specifies that biasing for ray tracing operations in mantra should
    operate along the normal vector rather than along the outgoing ray.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_queue_size"
        data-title="houdini_ui_queue_size"

    >
        <p class="label"><code>HOUDINI_UI_QUEUE_SIZE</code></p>
        <div class="content">


    <p >Specifies the size of the UI event queue.  Increasing this can
    help prevent queue overflows.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="fps"
        data-title="fps"

    >
        <p class="label"><code>FPS</code></p>
        <div class="content">


    <p >This variable is used by <code>iplay</code> to set the default frames per
    second.  It is automatically set by the OpenGL output driver.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_performance_size"
        data-title="houdini_performance_size"

    >
        <p class="label"><code>HOUDINI_PERFORMANCE_SIZE</code></p>
        <div class="content">


    <p >Specifies the number of lines that the performance monitor keeps.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_abekas_pal_xres"
        data-title="houdini_abekas_pal_xres"

    >
        <p class="label"><code>HOUDINI_ABEKAS_PAL_XRES</code></p>
        <div class="content">


    <p >Overrides the default resolution of the <code>abekas</code> image device.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_abekas_pal_yres"
        data-title="houdini_abekas_pal_yres"

    >
        <p class="label"><code>HOUDINI_ABEKAS_PAL_YRES</code></p>
        <div class="content">


    <p >Overrides the default resolution of the <code>abekas</code> image device.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_gauss_exp"
        data-title="houdini_gauss_exp"

    >
        <p class="label"><code>HOUDINI_GAUSS_EXP</code></p>
        <div class="content">


    <p >Specifies the exponent for the Gaussian filter kernel.  This
    affects any Gaussian filtering (image scaling, rendering, etc.)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mitchell_b"
        data-title="houdini_mitchell_b"

    >
        <p class="label"><code>HOUDINI_MITCHELL_B</code></p>
        <div class="content">


    <p >Specified the B parameter of the Mitchell filter kernel.  This
    affects any Mitchell filtering (image scaling, rendering, etc.)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mitchell_c"
        data-title="houdini_mitchell_c"

    >
        <p class="label"><code>HOUDINI_MITCHELL_C</code></p>
        <div class="content">


    <p >Specified the C parameter of the Mitchell filter kernel.  This
    affects any Mitchell filtering (image scaling, rendering, etc.)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_chop_oldnoise"
        data-title="houdini_chop_oldnoise"

    >
        <p class="label"><code>HOUDINI_CHOP_OLDNOISE</code></p>
        <div class="content">


    <p >The noise CHOP in Houdini5 and greater has a new method for
    computing random values.  This produces different results than
    Houdini4, but is more consistent on different hardware
    platforms.  If this variable is set, the noise CHOP in Houdini5
    will generate same values as Houdini4.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_full_shaderstring"
        data-title="houdini_full_shaderstring"

    >
        <p class="label"><code>HOUDINI_FULL_SHADERSTRING</code></p>
        <div class="content">


    <p >This variable determines whether shaders are output to mantra or <code>prman</code>
    with values set for all their parameters. If set to 0, then only
    parameters whose values are not at default are sent. This results in
    smaller IFD or RIB files. However, if the shader is changed without
    regenerating its corresponding .ds files, then the output might be wrong.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_typed_shaderstring"
        data-title="houdini_typed_shaderstring"

    >
        <p class="label"><code>HOUDINI_TYPED_SHADERSTRING</code></p>
        <div class="content">


    <p >This variable determines whether the shader string output to <code>prman</code>
    contains only the parameters that are tagged with a type.
    If the variable is not set, then all parameters are included whether or
    not they have a script type information. Otherwise, if it is set,
    then shader string will contain only parameters that have an explicit
    <code>script_ritype</code> tag set.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rsl_hashing"
        data-title="houdini_rsl_hashing"

    >
        <p class="label"><code>HOUDINI_RSL_HASHING</code></p>
        <div class="content">


    <p >To prevent name collisions on .slo files, Houdini will normally do
    hashing on the SLO shader name.  Mangling/hashing the shader name
    will help in cases where there are multiple shaders with the same
    name, but in different sub-networks.  In addition, hashing will
    help when the same <code>.hip</code> file is being used to generate shader files
    on a shared network drive (preventing overwriting by separate
    Houdini processes).</p>



    <p >The value of this variable has different levels of name mangling.</p>


    <div class="defs">



    <div id="0" class="def  ">
        <p class="label "><code>0</code>
        </p>
        <div class="content">

    <p >Disable all mangling of names</p>

</div>
    </div>



    <div id="1" class="def  ">
        <p class="label "><code>1</code>
        </p>
        <div class="content">

    <p >Hash shader name with the operator path name and the Houdini
        process id.</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >Place shader in a sub-directory based on the <code>.hip</code> file name</p>

</div>
    </div>



    <div id="3" class="def  ">
        <p class="label "><code>3</code>
        </p>
        <div class="content">

    <p >Place each shader in a sub-directory based on the <code>.hip</code> file
        name and the operator’s full path.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vop_definitions_path"
        data-title="houdini_vop_definitions_path"

    >
        <p class="label"><code>HOUDINI_VOP_DEFINITIONS_PATH</code></p>
        <div class="content">


    <p >Defines the directory search path where Houdini looks for connector
    type definitions (such as new struct definitions). The default is to look
    in the <code>vop</code> subdirectory of HOUDINI_PATH directories.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_default_shelf_tools"
        data-title="houdini_no_default_shelf_tools"

    >
        <p class="label"><code>HOUDINI_NO_DEFAULT_SHELF_TOOLS</code></p>
        <div class="content">


    <p >This variable, when set to non-zero, disables the automatic generation
    of the shelf tools for Houdini Digital Assets that don’t define
    any shelf tools (or explicitly removed all the tools from its
    tool section). Otherwise, when a digital asset is loaded, Houdini
    will generate a default tool that will allow the user to instantiate
    it from the shelf or the TAB menu.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_shelf_exclude_dirs_pattern"
        data-title="houdini_shelf_exclude_dirs_pattern"

    >
        <p class="label"><code>HOUDINI_SHELF_EXCLUDE_DIRS_PATTERN</code></p>
        <div class="content">


    <p >If set, this specifies a regular expression that is used to exclude
    matching subdirectories when searching for shelf files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_chop_linewidth"
        data-title="houdini_chop_linewidth"

    >
        <p class="label"><code>HOUDINI_CHOP_LINEWIDTH</code></p>
        <div class="content">


    <p >This variable controls the line thickness in the CHOP viewer.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_chop_units"
        data-title="houdini_chop_units"

    >
        <p class="label"><code>HOUDINI_CHOP_UNITS</code></p>
        <div class="content">


    <p >This sets the default parameter for the Units parameter of CHOPs. Valid
    values include: frames, samples, seconds.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_chop_image"
        data-title="houdini_chop_image"

    >
        <p class="label"><code>HOUDINI_CHOP_IMAGE</code></p>
        <div class="content">


    <p >This variable can be set to point to an image file which is
    displayed when the CHOP viewer is disabled.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_color_picker_gamma"
        data-title="houdini_color_picker_gamma"

    >
        <p class="label"><code>HOUDINI_COLOR_PICKER_GAMMA</code></p>
        <div class="content">


    <p >This variable specifies the gamma exponent for the device specific
    color correction of the color picker gadgets and color parameters.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_white_point"
        data-title="houdini_cineon_white_point"

    >
        <p class="label"><code>HOUDINI_CINEON_WHITE_POINT</code></p>
        <div class="content">


    <p >Defines the white point for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 685.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_film_gamma"
        data-title="houdini_cineon_film_gamma"

    >
        <p class="label"><code>HOUDINI_CINEON_FILM_GAMMA</code></p>
        <div class="content">


    <p >Defines the film gamma for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 0.6.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_black_point"
        data-title="houdini_cineon_black_point"

    >
        <p class="label"><code>HOUDINI_CINEON_BLACK_POINT</code></p>
        <div class="content">


    <p >Defines the Cineon black point for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 95.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_full_range"
        data-title="houdini_cineon_full_range"

    >
        <p class="label"><code>HOUDINI_CINEON_FULL_RANGE</code></p>
        <div class="content">


    <p >If set, the generated LUT from the <code>CINEON_WHITE_POINT</code> and
    <code>CINEON_FILM_GAMMA</code> is not clipped above the white point; the
    full range of the Cineon data is preserved. Only used by the
    Houdini 4.0 Compositor.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_render_lut"
        data-title="houdini_cineon_render_lut"

    >
        <p class="label"><code>HOUDINI_CINEON_RENDER_LUT</code></p>
        <div class="content">


    <p >Defines the default render LUT filename for reading and writing
    Cineon files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cineon_preview_lut"
        data-title="houdini_cineon_preview_lut"

    >
        <p class="label"><code>HOUDINI_CINEON_PREVIEW_LUT</code></p>
        <div class="content">


    <p >Defines the default preview LUT filename for reading and writing
    Cineon files. Only used by the Houdini 4.0 Compositor.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_display_gamma"
        data-title="houdini_image_display_gamma"

    >
        <p class="label"><code>HOUDINI_IMAGE_DISPLAY_GAMMA</code></p>
        <div class="content">


    <p >Defines the default gamma for Houdini (found in Edit &gt; Color Settings),
    for displaying images in the composite view, render view, 3D viewport
    and MPlay.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_display_lut"
        data-title="houdini_image_display_lut"

    >
        <p class="label"><code>HOUDINI_IMAGE_DISPLAY_LUT</code></p>
        <div class="content">


    <p >Defines the default display LUT for Houdini (found in Edit &gt; Color Settings),
    for displaying images in the composite view, render view, 3D viewport
    and MPlay.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocio_srgb_file_colorspace"
        data-title="houdini_ocio_srgb_file_colorspace"

    >
        <p class="label"><code>HOUDINI_OCIO_SRGB_FILE_COLORSPACE</code></p>
        <div class="content">


    <p >Sets the source colorspace for an sRGB file when loaded into MPlay.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocio_filename_colorspace"
        data-title="houdini_ocio_filename_colorspace"

    >
        <p class="label"><code>HOUDINI_OCIO_FILENAME_COLORSPACE</code></p>
        <div class="content">


    <p >Enables detection of the OpenColorIO colorspace of an image file by looking
    at the filename itself. If set to 1, detection is enabled. The longest,
    rightmost string that matches a colorspace will be taken as the colorspace.
    If none are found, use Houdini’s heuristics for determining the colorspace
    (JPG is sRGB, EXR is linear, etc). If set to 2, detection occurs in the same
    way but when no colorspace is found, the &ldquo;default&rdquo; role defined by the
    OpenColorIO <code>config.ocio</code> file is used (OpenColorIO strict parsing). When
    set to 0, detection is not performed and Houdini’s native heuristics are
    used to determine the colorspace.</p>



    <p >This only has an effect if an valid <code>OCIO</code> environment variable is set.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_display_override"
        data-title="houdini_image_display_override"

    >
        <p class="label"><code>HOUDINI_IMAGE_DISPLAY_OVERRIDE</code></p>
        <div class="content">


    <p >If set to 1, the <code>HOUDINI_IMAGE_DISPLAY_GAMMA</code> and <code>HOUDINI_IMAGE_DISPLAY_LUT</code>
    will always override the values stored in color.pref. When 0, these
    variables will only take effect if <code>colors.pref</code> is not present. Setting this
    to 2 will only allow gamma to override, and 3 only the LUT.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_inspect_lut"
        data-title="houdini_image_inspect_lut"

    >
        <p class="label"><code>HOUDINI_IMAGE_INSPECT_LUT</code></p>
        <div class="content">


    <p >Defines the default inspect LUT filename for inspecting images in
    the compositor’s viewer and MPlay.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_autoconvert_image_files"
        data-title="houdini_autoconvert_image_files"

    >
        <p class="label"><code>HOUDINI_AUTOCONVERT_IMAGE_FILES</code></p>
        <div class="content">


    <p >By default Houdini linearizes any non-linear image formats that it loads,
    and converts them from linear to the image format’s native colorspace when
    writing image files. This can be globally disabled by setting this variable
    to 0, though local options can still override it (<code>icp -g auto</code>, the
    Linearize Non-Linear Images in the File COP). This sets the initial
    default for those parameters. This should only be used if a LUT pipeline is
    handling the linearization of images. This should generally be used in
    conjunction with a <code>HOUDINI_IMAGE_DISPLAY_GAMMA</code> setting of 1.0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_lod"
        data-title="houdini_lod"

    >
        <p class="label"><code>HOUDINI_LOD</code></p>
        <div class="content">


    <p >This is an Level of Detail number, such as 0.01 or 1.0.  It becomes
    the default LOD for new windows.  Higher LODs will result in more
    accurate drawing of curves and surfaces, however at a corresponding
    cost in display speed.  By default, it is set to 1.0.  If you find
    yourself having to constantly change the View Parameter:Viewer:LOD
    setting, you might save some work by just making your default a
    better value.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_wf_gamma"
        data-title="houdini_wf_gamma"

    >
        <p class="label"><code>HOUDINI_WF_GAMMA</code></p>
        <div class="content">


    <p >Specifies the gamma value written out to Wavefront <code>.rla</code> files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="editor"
        data-title="editor"

    >
        <p class="label"><code>EDITOR</code></p>
        <div class="content">


    <p >Houdini will use this variable to determine which external graphical
    editor to invoke when editing text.  The editor should run in the
    foreground.</p>



    <p >If the VISUAL environment variable is set, then it is used instead of
    EDITOR and started as a graphical process. In other words, the VISUAL
    environment variable will override this and thus have no effect if VISUAL
    is also set. If both the VISUAL and EDITOR variables are <em>not</em> set, then
    a default editor (Windows Notepad, Mac OS X Text Edit, Linux GEdit) is used.</p>



    <p >This environment variable may be used by applications other than Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="visual"
        data-title="visual"

    >
        <p class="label"><code>VISUAL</code></p>
        <div class="content">


    <p >Houdini will use this variable to determine which external editor
    to invoke when editing text.</p>



    <p >If this environment variable is not set, then the EDITOR environment
    variable is used. See the help for the EDITOR environment variable to see
    what are the defaults if both are not set.</p>



    <p >This environment variable may be used by applications other than Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hfs"
        data-title="hfs"

    >
        <p class="label"><code>HFS</code></p>
        <div class="content">


    <p >The path where Houdini is installed.
    Houdini reads the configuration information from <code>$HFS/houdini</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hh"
        data-title="hh"

    >
        <p class="label"><code>HH</code></p>
        <div class="content">


    <p >The path to Houdini supporting scripts and files inside <code>$HFS</code>.
    Usually <code>$HFS/houdini</code></p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hhp"
        data-title="hhp"

    >
        <p class="label"><code>HHP</code></p>
        <div class="content">


    <p >The path to Houdini’s python libraries.  This will differ depending on the
    version of python that Houdini is built with.  For example <code>$HH/python3.7libs</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="shell"
        data-title="shell"

    >
        <p class="label"><code>SHELL</code></p>
        <div class="content">


    <p >When Houdini starts external applications, it uses the SHELL
    variable to determine how to start them.
    This may be used by applications other than Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="home"
        data-title="home"

    >
        <p class="label"><code>HOME</code></p>
        <div class="content">


    <p >This variable determines your &ldquo;home&rdquo; directory.
    This may be used by applications other than Houdini.
    Houdini mostly uses files in <code>$HOME/houdiniVERSION</code>, where VERSION i
    the current version number (ie: <code>$HOME/houdini6</code> or <code>$HOME/houdini6.1</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hsite"
        data-title="hsite"

    >
        <p class="label"><code>HSITE</code></p>
        <div class="content">


    <p >The HSITE variable is a path to the site-specific Houdini
    configuration information.  This allows a site to have a common
    set of defaults and files.  It is, by default, in the <code>HOUDINI_PATH</code>
    between HOME and HFS.  To change global configuration information,
    you should use this rather than editing the contents of
    <code>$HFS/houdini</code>.</p>



    <p >Like <code>HOME</code>, Houdini uses <code>$HSITE/houdiniVERSION</code>, where version is
    the current version number (ie: <code>$HSITE/houdini16</code> or
    <code>$HSITE/houdini16.1</code>)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="job"
        data-title="job"

    >
        <p class="label"><code>JOB</code></p>
        <div class="content">


    <p >See <a href="../basics/project.html" class="link   None"title="The File > New Project and File > Set Project menu items let you set up project directories and associate scene files with projects.">project management</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_temp_dir"
        data-title="houdini_temp_dir"

    >
        <p class="label"><code>HOUDINI_TEMP_DIR</code></p>
        <div class="content">


    <p >Specifies a directory where Houdini will generate temporary files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_undo_dir"
        data-title="houdini_undo_dir"

    >
        <p class="label"><code>HOUDINI_UNDO_DIR</code></p>
        <div class="content">


    <p >Specifies a directory where Houdini will store undo information.
    If not specified, the temporary directory will be used.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_condense_hip"
        data-title="houdini_condense_hip"

    >
        <p class="label"><code>HOUDINI_CONDENSE_HIP</code></p>
        <div class="content">


    <p >If this variable is set Houdini will attempt to make paths entered
    &ldquo;friendly&rdquo; by replacing portions of filename paths with <code>$HIP</code> if
    it’s appropriate.  This behavior is off by default.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_unbuffered_stdinout"
        data-title="houdini_unbuffered_stdinout"

    >
        <p class="label"><code>HOUDINI_UNBUFFERED_STDINOUT</code></p>
        <div class="content">


    <p >If this variable is set, Houdini will not buffer the console’s standard
    input and output.  When output is unbuffered, any output you write to the
    console (from C++, Python, etc.) will appear immediately, without you
    having to write a newline character or flush the output.  This variable
    is similar to Python’s <code>PYTHONUNBUFFERED</code> variable.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_message_command"
        data-title="houdini_message_command"

    >
        <p class="label"><code>HOUDINI_MESSAGE_COMMAND</code></p>
        <div class="content">


    <p >An external program which Houdini uses to display graphical messages.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_confirm_command"
        data-title="houdini_confirm_command"

    >
        <p class="label"><code>HOUDINI_CONFIRM_COMMAND</code></p>
        <div class="content">


    <p >An external program which Houdini uses to display confirmation boxes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_web_browser_command"
        data-title="houdini_web_browser_command"

    >
        <p class="label"><code>HOUDINI_WEB_BROWSER_COMMAND</code></p>
        <div class="content">


    <p >An external program which Houdini uses to display web pages. For example
    <code>&#34;/usr/bin/firefox&#34;</code> on Linux or <code>&#34;c:/Progra~1/Mozill~2/firefox.exe&#34;</code> on
    Windows (though <code>&#34;c:\\\Progra~1\\\Mozill~2\\\firefox.exe&#34;</code> is also valid).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_terminal_command"
        data-title="houdini_terminal_command"

    >
        <p class="label"><code>HOUDINI_TERMINAL_COMMAND</code></p>
        <div class="content">


    <p >An external program which Houdini uses as a terminal. For example
    the default <code>&#34;xterm&#34;</code> or <code>&#34;gnome-terminal&#34;</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_condense_blocklist"
        data-title="houdini_condense_blocklist"

    >
        <p class="label"><code>HOUDINI_CONDENSE_BLOCKLIST</code></p>
        <div class="content">


    <p >A space separated list of environment variables to not condense
    paths to.   Simple pattern matching with * and ? is possible.
    HIP, JOB, and HOME are common condensation targets.  This often
    happens internally to .hip files in locations such as OPlibraries.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_errorlog_filename"
        data-title="houdini_errorlog_filename"

    >
        <p class="label"><code>HOUDINI_ERRORLOG_FILENAME</code></p>
        <div class="content">


    <p >If set to a valid file name, Houdini will log all errors of severity
    above <code>HOUDINI_ERRORLOG_LEVEL</code> to this file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_errorlog_level"
        data-title="houdini_errorlog_level"

    >
        <p class="label"><code>HOUDINI_ERRORLOG_LEVEL</code></p>
        <div class="content">


    <p >The minimum error level that Houdini will write to the error log file
    specified by <code>HOUDINI_ERRORLOG_FILENAME</code>.  Valid values are integers
    between 0 (all errors will be logged) and 6 (nothing will be logged)
    inclusive.  Default value is 3.
    Error levels are defined as follows: 1, message; 2, prompt; 3, warning;
    4, abort operation; 5, fatal error.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_default_texture_color"
        data-title="houdini_default_texture_color"

    >
        <p class="label"><code>HOUDINI_DEFAULT_TEXTURE_COLOR</code></p>
        <div class="content">


    <p >Specifies the default color to use when texture maps cannot be
    found while rendering.  This can be specified as a single string
    containing four floating point numbers representing the red,
    green, blue and alpha components of the default color.  For
    example:</p>



    <p ><code>setenv HOUDINI_DEFAULT_TEXTURE_COLOR &#34;0 0 0 0&#34;</code></p>



    <p >to set it to zero black.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_desktop_dir"
        data-title="houdini_desktop_dir"

    >
        <p class="label"><code>HOUDINI_DESKTOP_DIR</code></p>
        <div class="content">


    <p >This variable specifies the file path to the folder or the directory
    that is considered the user’s system desktop directory. This variable is
    used in the file chooser dialog to jump to the user’s desktop.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_ambient"
        data-title="houdini_vex_default_ambient"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_AMBIENT</code></p>
        <div class="content">


    <p >The default VEX ambient light shader.  If no shader can be found
    for an ambient light source, this shader will be applied at render
    time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_light"
        data-title="houdini_vex_default_light"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_LIGHT</code></p>
        <div class="content">


    <p >The default VEX light shader.  If no shader can be found for a
    light source, this shader will be applied at render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_lightsurface"
        data-title="houdini_vex_default_lightsurface"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_LIGHTSURFACE</code></p>
        <div class="content">


    <p >The default VEX surface shader for light sources.  The emission (Ce) of
    this shader is used to specify the illumination from the light source.
    If no shader can be found for a light source, this shader will be applied
    at render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_matte"
        data-title="houdini_vex_default_matte"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_MATTE</code></p>
        <div class="content">


    <p >The default VEX matte surface shader.  This shader is used at render
    time to provide a background surface if there is fog applied to a scene.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_shadow"
        data-title="houdini_vex_default_shadow"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_SHADOW</code></p>
        <div class="content">


    <p >The default VEX shadow shader.  If a light source is casting shadows,
    but no shadow shader is found, this shader is applied at render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_surface"
        data-title="houdini_vex_default_surface"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_SURFACE</code></p>
        <div class="content">


    <p >The default VEX surface shader.  If no surface shader can be
    found, this shader will be applied at render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_default_volume"
        data-title="houdini_vex_default_volume"

    >
        <p class="label"><code>HOUDINI_VEX_DEFAULT_VOLUME</code></p>
        <div class="content">


    <p >The default VEX surface shader applied to volumes.  If no surface
    shader can be found for an object, this shader will be applied at
    render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_debug"
        data-title="houdini_ogl_debug"

    >
        <p class="label"><code>HOUDINI_OGL_DEBUG</code></p>
        <div class="content">


    <p >Starts Houdini with a debug GL profile, if supported by the OpenGL driver.
    This can be used to help debug GL render hooks in the HDK. The value
    specifies the level, which includes reporting from all levels below it.
    This information is provided by the OpenGL driver and requires the
    GL_ARB_debug_output extension. Messages are written to the standard error
    stream and prefixed with <code>HOUDINI_OGL_DEBUG</code>.</p>


    <div class="defs">



    <div id="0" class="def  ">
        <p class="label "><code>0</code>
        </p>
        <div class="content">

    <p >No debugging (default)</p>

</div>
    </div>



    <div id="1" class="def  ">
        <p class="label "><code>1</code>
        </p>
        <div class="content">

    <p >High priority messages only</p>

</div>
    </div>



    <div id="2" class="def  ">
        <p class="label "><code>2</code>
        </p>
        <div class="content">

    <p >Medium and high priorities</p>

</div>
    </div>



    <div id="3" class="def  ">
        <p class="label "><code>3</code>
        </p>
        <div class="content">

    <p >Low, medium and high priorities</p>

</div>
    </div>



    <div id="4" class="def  ">
        <p class="label "><code>4</code>
        </p>
        <div class="content">

    <p >All messages (notifications, low, medium and high priorities)</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_debug_exclude"
        data-title="houdini_ogl_debug_exclude"

    >
        <p class="label"><code>HOUDINI_OGL_DEBUG_EXCLUDE</code></p>
        <div class="content">


    <p >Excludes certain messages types from debug output when <code>HOUDINI_OGL_DEBUG</code> is
    enabled. Multiple message types and sources can be excluded, specified by
    whitespace-separated strings.</p>


    <div class="defs">



    <div id="error" class="def  ">
        <p class="label "><code>error</code>
        </p>
        <div class="content">

    <p >OpenGL Errors</p>

</div>
    </div>



    <div id="performance" class="def  ">
        <p class="label "><code>performance</code>
        </p>
        <div class="content">

    <p >Issues affecting performance</p>

</div>
    </div>



    <div id="portability" class="def  ">
        <p class="label "><code>portability</code>
        </p>
        <div class="content">

    <p >Legal uses of OpenGL on this platform that may not work on others</p>

</div>
    </div>



    <div id="undefined" class="def  ">
        <p class="label "><code>undefined</code>
        </p>
        <div class="content">

    <p >Use of OpenGL whose behavior is not defined by the OpenGL specification</p>

</div>
    </div>



    <div id="deprecated" class="def  ">
        <p class="label "><code>deprecated</code>
        </p>
        <div class="content">

    <p >Use of OpenGL features that are deprecated (legacy)</p>

</div>
    </div>



    <div id="other" class="def  ">
        <p class="label "><code>other</code>
        </p>
        <div class="content">

    <p >Other miscellaneous messages</p>

</div>
    </div>



    <div id="annotation" class="def  ">
        <p class="label "><code>annotation</code>
        </p>
        <div class="content">

    <p >Houdini debug annotations</p>

</div>
    </div>



    <div id="group" class="def  ">
        <p class="label "><code>group</code>
        </p>
        <div class="content">

    <p >Houdini main rendering group annotations</p>

</div>
    </div>



    <div id="opengl" class="def  ">
        <p class="label "><code>opengl</code>
        </p>
        <div class="content">

    <p >Message originated from the OpenGL driver</p>

</div>
    </div>



    <div id="compiler" class="def  ">
        <p class="label "><code>compiler</code>
        </p>
        <div class="content">

    <p >Message originated from the GLSL compiler, or other compiler</p>

</div>
    </div>



    <div id="window" class="def  ">
        <p class="label "><code>window</code>
        </p>
        <div class="content">

    <p >Message originated from the Window Manager (WGL, GLX, AGL)</p>

</div>
    </div>



    <div id="houdini" class="def  ">
        <p class="label "><code>houdini</code>
        </p>
        <div class="content">

    <p >Message originated from Houdini</p>

</div>
    </div>



    <div id="thirdparty" class="def  ">
        <p class="label "><code>thirdparty</code>
        </p>
        <div class="content">

    <p >Message originated from outside OpenGL, Houdini or Window Manager</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_pickbuffer_path"
        data-title="houdini_ogl_pickbuffer_path"

    >
        <p class="label"><code>HOUDINI_OGL_PICKBUFFER_PATH</code></p>
        <div class="content">


    <p >For debugging viewport picking. Specifies a directory where pick buffers
    should be written out as image files for later inspection. Use the
    <code>HOUDINI_OGL_FILECOUNT</code> variable to control the number of files to write
    before looping around to overwrite existing files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_snapbuffer_path"
        data-title="houdini_ogl_snapbuffer_path"

    >
        <p class="label"><code>HOUDINI_OGL_SNAPBUFFER_PATH</code></p>
        <div class="content">


    <p >For debugging viewport snapping. Specifies a directory where snap buffers
    should be written out as image files for later inspection. Use the
    <code>HOUDINI_OGL_FILECOUNT</code> variable to control the number of files to write
    before looping around to overwrite existing files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_beauty_path"
        data-title="houdini_ogl_beauty_path"

    >
        <p class="label"><code>HOUDINI_OGL_BEAUTY_PATH</code></p>
        <div class="content">


    <p >For debugging viewport drawing. Specifies a directory where geometry
    draw should be written out as image files for later inspection. Use the
    <code>HOUDINI_OGL_FILECOUNT</code> variable to control the number of files to write
    before looping around to overwrite existing files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_viewport_path"
        data-title="houdini_ogl_viewport_path"

    >
        <p class="label"><code>HOUDINI_OGL_VIEWPORT_PATH</code></p>
        <div class="content">


    <p >For debugging viewport drawing. Specifies a directory where final viewport
    buffers should be written out as image files for later inspection. Use the
    <code>HOUDINI_OGL_FILECOUNT</code> variable to control the number of files to write
    before looping around to overwrite existing files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_filecount"
        data-title="houdini_ogl_filecount"

    >
        <p class="label"><code>HOUDINI_OGL_FILECOUNT</code></p>
        <div class="content">


    <p >Controls the number of images to keep when writing out OpenGL buffers with
    the <code>HOUDINI_OGL_SNAPBUFFER_PATH</code>, <code>HOUDINI_OGL_PICKBUFFER_PATH</code> and
    <code>HOUDINI_OGL_BEAUTY_PATH</code> values.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_copy_suffix"
        data-title="houdini_copy_suffix"

    >
        <p class="label"><code>HOUDINI_COPY_SUFFIX</code></p>
        <div class="content">


    <p >When copy/pasting, this variable can be used to create user-specific temporary files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_opnamespace_hierarchy"
        data-title="houdini_opnamespace_hierarchy"

    >
        <p class="label"><code>HOUDINI_OPNAMESPACE_HIERARCHY</code></p>
        <div class="content">


    <p >Defines the operator type namespace hierarchy as a space-separated
    list of namespace names and/or operator type names, sorted according to
    the descending preference order. This hierarchy is used to resolve
    any ambiguous operator type names used in scripts (eg, in opadd command)
    A few examples:</p>



    <p >Given hierarchy <code>&#34;userB userA&#34;</code> and available operators <code>userA::hda</code> and
    <code>userB::hda</code>, the command <code>&#34;opadd hda&#34;</code> will choose <code>userB::hda</code>.</p>



    <p >Given hierarchy <code>&#34;Sop/hda::2.0&#34;</code> and available operators <code>hda::2.0</code> and
    <code>hda::3.0</code>, the command <code>&#34;opadd hda&#34;</code> will choose <code>hda::2.0</code>.</p>



    <p >Given hierarchy <code>&#34;Sop/hda::&#34;</code> and available operators <code>hda</code> and <code>hda::1.0</code>,
    the command <code>&#34;opadd hda&#34;</code> will choose <code>hda</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_rman_curve_basis"
        data-title="houdini_rman_curve_basis"

    >
        <p class="label"><code>HOUDINI_RMAN_CURVE_BASIS</code></p>
        <div class="content">


    <p >Obsolete control.
    Specify the curve interpolation when generating RiCurve primitives in a
    RIB stream.  This should be one of <code>&#34;linear&#34;</code> or <code>&#34;cubic&#34;</code>.  This is obsolete
    and may be removed from future versions.  It has been replaced by the
    <code>ri_curveinterpolation</code> detail string attribute.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cop_disk_defaultname"
        data-title="houdini_cop_disk_defaultname"

    >
        <p class="label"><code>HOUDINI_COP_DISK_DEFAULTNAME</code></p>
        <div class="content">


    <p >Obsolete control</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cop_ensurecolorplanes"
        data-title="houdini_cop_ensurecolorplanes"

    >
        <p class="label"><code>HOUDINI_COP_ENSURECOLORPLANES</code></p>
        <div class="content">


    <p >Forces each COP to generate C and A color planes.  Provides backwards
    compatibility with old versions of Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cop_maxres"
        data-title="houdini_cop_maxres"

    >
        <p class="label"><code>HOUDINI_COP_MAXRES</code></p>
        <div class="content">


    <p >Override the maximum compositing resolution (10000×10000 by default).
    This integer is use as both the max width and height of an image.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ri_shaderpath"
        data-title="houdini_ri_shaderpath"

    >
        <p class="label"><code>HOUDINI_RI_SHADERPATH</code></p>
        <div class="content">


    <p >When the RSL shader search path is not specified on the RIB output driver
    in the Shader Path parameter (or if the parameter does not exist),
    then this environment variable is checked.  If this variable exists,
    then its value will be output to the RIB stream.  If the variable
    doesn’t exist, a specially constructed search path will be output
    to the RIB file. That specially constructed path consists of
    the current directory, followed by the list of <code>ri_shader</code> sub-directories
    in <code>HOUDINI_PATH</code>, followed by the RenderMan’s default shader search path.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ri_rixpluginpath"
        data-title="houdini_ri_rixpluginpath"

    >
        <p class="label"><code>HOUDINI_RI_RIXPLUGINPATH</code></p>
        <div class="content">


    <p >When the RIS shader search path is not specified on the RIB output driver
    in the Rix Plugin Path parameter (or if the parameter does not exist),
    then this environment variable is checked.  If this variable exists,
    then its value will be output to the RIB stream.  If the variable
    doesn’t exist, then no RIS plugin path will be output to the RIB file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_file_viewer"
        data-title="houdini_file_viewer"

    >
        <p class="label"><code>HOUDINI_FILE_VIEWER</code></p>
        <div class="content">


    <p >Specify an external application to view files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_check_xform"
        data-title="houdini_check_xform"

    >
        <p class="label"><code>HOUDINI_CHECK_XFORM</code></p>
        <div class="content">


    <p >When generating scripts for renderers, if this variable is set,
    the transforms on objects will be tested to see if they are
    singular (i.e. whether there are zero scales).  If the transform
    is singular, the object will not be output.</p>



    <p >The value of this variable is the threshold at which the transform
    is considered zero.  Thus, the variable should be set to some very
    small floating point number.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_stpath"
        data-title="houdini_stpath"

    >
        <p class="label"><code>HOUDINI_STPATH</code></p>
        <div class="content">


    <p >Specify a path to search for the source to a shader when editing
    shader code from pop-up dialog scripts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_stedit"
        data-title="houdini_stedit"

    >
        <p class="label"><code>HOUDINI_STEDIT</code></p>
        <div class="content">


    <p >Specify an external application to edit shaders with.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_doublebuffer"
        data-title="houdini_doublebuffer"

    >
        <p class="label"><code>HOUDINI_DOUBLEBUFFER</code></p>
        <div class="content">


    <p >This variable can be set to either ON or OFF.  It will force
    Houdini to run in either single or double buffer mode.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_worksheet_boxpick"
        data-title="houdini_worksheet_boxpick"

    >
        <p class="label"><code>HOUDINI_WORKSHEET_BOXPICK</code></p>
        <div class="content">


    <p >This environment variable is used to override using the left mouse
    button for box picking in the network worksheet.  Can be set to
    either &ldquo;middle&rdquo; or &ldquo;right&rdquo;.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_defoptypeprefix"
        data-title="houdini_defoptypeprefix"

    >
        <p class="label"><code>HOUDINI_DEFOPTYPEPREFIX</code></p>
        <div class="content">


    <p >When you convert a subnet into a new operator type, this prefix,
    if present, will be used for guessing what the basename of the new
    operator should be.  If not present, the username is used.</p>



    <p >For example, setting this to <code>&#34;foobar_&#34;</code> will ensure all operators
    created will have their basename type prefixed by <code>foobar_</code>.  This
    can be used to ensure conflicts don’t occur with other projects
    operators.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_compiler"
        data-title="houdini_vex_compiler"

    >
        <p class="label"><code>HOUDINI_VEX_COMPILER</code></p>
        <div class="content">


    <p >External application used for compiling VEX code. Usually &ldquo;vcc&rdquo;.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_abekas_logname"
        data-title="houdini_abekas_logname"

    >
        <p class="label"><code>HOUDINI_ABEKAS_LOGNAME</code></p>
        <div class="content">


    <p >Specify the user name for logging into an Abekas frame recorder.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_abekas_logpasswd"
        data-title="houdini_abekas_logpasswd"

    >
        <p class="label"><code>HOUDINI_ABEKAS_LOGPASSWD</code></p>
        <div class="content">


    <p >Specify the password for logging into an Abekas frame recorder.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_md_command"
        data-title="houdini_md_command"

    >
        <p class="label"><code>HOUDINI_MD_COMMAND</code></p>
        <div class="content">


    <p >Specify the external application used by the md image device to
    read images from stdin and display them in a persistent frame
    buffer device (i.e. MPlay).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_md_command_flip"
        data-title="houdini_md_command_flip"

    >
        <p class="label"><code>HOUDINI_MD_COMMAND_FLIP</code></p>
        <div class="content">


    <p >Specify the external application used by the md image device to
    read images from stdin and display them upside down in a
    persistent frame buffer device (i.e.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mplay_lockpath"
        data-title="houdini_mplay_lockpath"

    >
        <p class="label"><code>HOUDINI_MPLAY_LOCKPATH</code></p>
        <div class="content">


    <p >Specify a directory to create the MPlay lockfiles.  These files
    will normally be created in the user’s HOME directory.  The value
    of this variable should point to a directory where lockfiles can
    be created (i.e. /tmp or c:/temp).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_external_help_browser"
        data-title="houdini_external_help_browser"

    >
        <p class="label"><code>HOUDINI_EXTERNAL_HELP_BROWSER</code></p>
        <div class="content">


    <p >When this variable is defined, Houdini will launch a default web
    browser to display the help documents externally. This applies only
    to the Houdini’s floating help browser pane; the embedded panes will
    still show the Houdini’s own help browser. This environment variable
    is useful to display html content which cannot be normally displayed
    in the standard help browser (such as https).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_background_help_indexing"
        data-title="houdini_disable_background_help_indexing"

    >
        <p class="label"><code>HOUDINI_DISABLE_BACKGROUND_HELP_INDEXING</code></p>
        <div class="content">


    <p >Set this variable to &ldquo;1&rdquo; to prevent Houdini from indexing help files in the
    background.  If this variable is not set or is set to any value other than
    &ldquo;1&rdquo; then Houdini spawns a separate thread on startup to index help
    files.  The thread indexes all help files once at startup and then indexes
    incremental changes throughout the application session.</p>



    <p >This variable must be set before Houdini is launched for it to take effect.</p>


    <div class="notices ind-group">





    <div class="notice ind-item note  ">
        <p class="label"><span class="g fa fa-fw fa-info-circle"></span>Note</p>
        <div class="content">


    <p >Background help indexing occurs only in graphical Houdini.</p>


        </div>
    </div>

</div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ip_command"
        data-title="houdini_ip_command"

    >
        <p class="label"><code>HOUDINI_IP_COMMAND</code></p>
        <div class="content">


    <p >Specify the external application used by the ip image device to
    read images from stdin and display them in a viewer (i.e. <code>iplay</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ip_command_flip"
        data-title="houdini_ip_command_flip"

    >
        <p class="label"><code>HOUDINI_IP_COMMAND_FLIP</code></p>
        <div class="content">


    <p >Specify the external application used by the ip image device to
    read images from stdin and display them upside down in a viewer
    (i.e. <code>iplay</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="user"
        data-title="user"

    >
        <p class="label"><code>USER</code></p>
        <div class="content">


    <p >Internally, Houdini will to override this variable with
    information from the login session.  This variable represents the
    name of the user logged in.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_os"
        data-title="houdini_os"

    >
        <p class="label"><code>HOUDINI_OS</code></p>
        <div class="content">


    <p >The OS that Houdini believes it’s running on.  Possible values of
    this variable are currently defined as <code>&#34;Windows&#34;</code>, <code>&#34;Linux&#34;</code>,
    or <code>&#34;MacOS&#34;</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_resources"
        data-title="houdini_ui_resources"

    >
        <p class="label"><code>HOUDINI_UI_RESOURCES</code></p>
        <div class="content">


    <p >An application variable which specifies the name of the resource file used
    for Houdini. It is rare that you would need to change this variable,
    and incorrectly setting it will cause the graphical Houdini applications
    to fail on startup.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_path"
        data-title="houdini_path"

    >
        <p class="label"><code>HOUDINI_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini looks for configuration
    files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_otl_path"
        data-title="houdini_otl_path"

    >
        <p class="label"><code>HOUDINI_OTL_PATH</code></p>
        <div class="content">


    <p >This path is not used directly by Houdini.  It is used to provide
    default values for the <code>HOUDINI_OPLIBRARIES_PATH</code> and <code>HOUDINI_OTLSCAN_PATH</code>
    values in a way that is backward compatible (since <code>HOUDINI_OTL_PATH</code>
    used to mean what <code>HOUDINI_OPLIBRARIES_PATH</code> now means).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_otlscan_path"
        data-title="houdini_otlscan_path"

    >
        <p class="label"><code>HOUDINI_OTLSCAN_PATH</code></p>
        <div class="content">


    <p >This path specifies the directories Houdini will search for OTL files.
    This value is only used if the Operator Type Manager is configured not
    to use <code>OPlibraries</code> files to find OTL files. The default for this value
    is the HOUDINI_OTL_PATH with <code>/otls</code> appended to each directory in
    that path.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_oplibraries_path"
        data-title="houdini_oplibraries_path"

    >
        <p class="label"><code>HOUDINI_OPLIBRARIES_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini looks for <code>OPlibraries</code> files
    for loading OTL files at startup.  <code>OPlibraries</code> files are only used
    if the Operator Type Manager is configured to use them. Otherwise
    OTL files are scanned for directly.  This path by default is equal
    to the <code>HOUDINI_OTL_PATH</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_script_path"
        data-title="houdini_script_path"

    >
        <p class="label"><code>HOUDINI_SCRIPT_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini searches for scripts.  This
    includes <code>.cmd</code> files for <code>hscript</code>, <code>.class</code> files for the java command,
    <code>.tcl</code> and <code>.tk</code> files for the <code>tcl</code> and <code>tk</code> commands, and command scripts
    for the Alfred Output Driver.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_soho_path"
        data-title="houdini_soho_path"

    >
        <p class="label"><code>HOUDINI_SOHO_PATH</code></p>
        <div class="content">


    <p >The path of directories used by soho.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_clip_path"
        data-title="houdini_clip_path"

    >
        <p class="label"><code>HOUDINI_CLIP_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini looks for <code>.clip</code> and <code>.bclip</code> channel files</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_custom_path"
        data-title="houdini_custom_path"

    >
        <p class="label"><code>HOUDINI_CUSTOM_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini looks for custom panel information.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_desk_path"
        data-title="houdini_desk_path"

    >
        <p class="label"><code>HOUDINI_DESK_PATH</code></p>
        <div class="content">


    <p >The path of directories where Houdini looks for desktops.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dso_path"
        data-title="houdini_dso_path"

    >
        <p class="label"><code>HOUDINI_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom plug-ins (Dynamic Shared Objects or Dynamic Link Libraries).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_gallery_path"
        data-title="houdini_gallery_path"

    >
        <p class="label"><code>HOUDINI_GALLERY_PATH</code></p>
        <div class="content">


    <p >Specifies the search path to the directory that contains the gallery files.
    If this variable is not set, Houdini looks in the <code>gallery</code> subdirectories
    of the standard search path, which includes <code>$HFS/houdini/gallery/</code>, for
    example.  Gallery files specify the predefined parameter values for any node
    type, much like the presets. However, they are used predominantly for
    defining shaders and materials.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_image_dso_path"
        data-title="houdini_image_dso_path"

    >
        <p class="label"><code>HOUDINI_IMAGE_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom image format plugins for
    reading and writing images of that format (<code>.so</code>, <code>.dll</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_audio_dso_path"
        data-title="houdini_audio_dso_path"

    >
        <p class="label"><code>HOUDINI_AUDIO_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom audio format plugins for
    reading and writing audio or channel files (<code>.so</code>, <code>.dll</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_dso_path"
        data-title="houdini_pdg_dso_path"

    >
        <p class="label"><code>HOUDINI_PDG_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom PDG node, work item, and scheduler
    definitions (<code>.so</code>, <code>.dll</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdgd_dso_path"
        data-title="houdini_pdgd_dso_path"

    >
        <p class="label"><code>HOUDINI_PDGD_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom PDG data interface and server
    definitions (<code>.so</code>, <code>.dll</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_opui_dso_path"
        data-title="houdini_opui_dso_path"

    >
        <p class="label"><code>HOUDINI_OPUI_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom network editor plugins, such as adding
    icon or text badges to nodes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_usd_dso_path"
        data-title="houdini_usd_dso_path"

    >
        <p class="label"><code>HOUDINI_USD_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading USD plugins. These paths are passed to the USD
    library to perform its own plugin loading.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_dso_path"
        data-title="houdini_vex_dso_path"

    >
        <p class="label"><code>HOUDINI_VEX_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading custom VEX functions.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="mantra_dso_path"
        data-title="mantra_dso_path"

    >
        <p class="label"><code>MANTRA_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading mantra specific plug-ins (procedurals)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="karma_dso_path"
        data-title="karma_dso_path"

    >
        <p class="label"><code>KARMA_DSO_PATH</code></p>
        <div class="content">


    <p >The search path for loading karma specific plug-ins (procedurals)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_old_presets"
        data-title="houdini_enable_old_presets"

    >
        <p class="label"><code>HOUDINI_ENABLE_OLD_PRESETS</code></p>
        <div class="content">


    <p >If set, the preset menu in the parameter pane toolbar will show
    the old-style presets options for loading and saving the presets to a file.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_use_otl_as_default_hda_ext"
        data-title="houdini_use_otl_as_default_hda_ext"

    >
        <p class="label"><code>HOUDINI_USE_OTL_AS_DEFAULT_HDA_EXT</code></p>
        <div class="content">


    <p >If set, Houdini will use the older <code>.otl</code> as the default extension for
    digital assets instead of the newer <code>.hda</code> extension.</p>



    <p >This can be useful when using a legacy asset management system that
    does not yet understand the new <code>.hda</code> extension.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_geometry_path"
        data-title="houdini_geometry_path"

    >
        <p class="label"><code>HOUDINI_GEOMETRY_PATH</code></p>
        <div class="content">


    <p >The search path for geometry files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_geometry_cachesize"
        data-title="houdini_geometry_cachesize"

    >
        <p class="label"><code>HOUDINI_GEOMETRY_CACHESIZE</code></p>
        <div class="content">


    <p >The size for caching of tessellated geometry in Houdini.  Some uses
    for tessellated geometry include viewport rendering, and ray
    intersections.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_macro_path"
        data-title="houdini_macro_path"

    >
        <p class="label"><code>HOUDINI_MACRO_PATH</code></p>
        <div class="content">


    <p >The search path for toolbar macro files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_menu_path"
        data-title="houdini_menu_path"

    >
        <p class="label"><code>HOUDINI_MENU_PATH</code></p>
        <div class="content">


    <p >The search path for XML menu files, such as the main menu, the node RMB
    menu, parameter menu, and shelf menu.</p>



    <p >Note, the paths are scanned in reverse order, i.e., the files from
    directories further in the path are loaded first, and files from directories
    earlier in the path are loaded later. This ensures that the default
    menus are loaded first, which allows custom files to modify their
    configuration.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_path"
        data-title="houdini_pdg_path"

    >
        <p class="label"><code>HOUDINI_PDG_PATH</code></p>
        <div class="content">


    <p >The search path for PDG templates, interface files and custom Python node
    definitions.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdgd_path"
        data-title="houdini_pdgd_path"

    >
        <p class="label"><code>HOUDINI_PDGD_PATH</code></p>
        <div class="content">


    <p >The search path for custom PDGD visualizer and backend types.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_python_panel_path"
        data-title="houdini_python_panel_path"

    >
        <p class="label"><code>HOUDINI_PYTHON_PANEL_PATH</code></p>
        <div class="content">


    <p >The search path for factory and custom Python panel files.  The panel files
    are searched for and loaded when Houdini starts. They can define interfaces
    that appear in Python Panels or set the configuration of the Python Panel
    interfaces menu.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_texture_path"
        data-title="houdini_texture_path"

    >
        <p class="label"><code>HOUDINI_TEXTURE_PATH</code></p>
        <div class="content">


    <p >The search path for loading images.  This includes .rat files and
    other 2D formats as well as .i3d 3D texture files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_toolbar_path"
        data-title="houdini_toolbar_path"

    >
        <p class="label"><code>HOUDINI_TOOLBAR_PATH</code></p>
        <div class="content">


    <p >The search path for factory and custom shelves and shelf tools (i.e.,
    shelf files). The shelf files are searched for and loaded when Houdini
    starts. They can define new tools that appear in the TAB menu or new
    groupings of tools (ie, toolbars or shelves) which can be displayed in the
    shelving area (usually, just below the main menu).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_radialmenu_path"
        data-title="houdini_radialmenu_path"

    >
        <p class="label"><code>HOUDINI_RADIALMENU_PATH</code></p>
        <div class="content">


    <p >The search path for factory and custom radial menus. The radial menu files
    are searched for and loaded when Houdini starts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ramp_path"
        data-title="houdini_ramp_path"

    >
        <p class="label"><code>HOUDINI_RAMP_PATH</code></p>
        <div class="content">


    <p >The search path for factory and custom ramps. The ramp files are searched
    for and loaded when Houdini starts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_app_path"
        data-title="houdini_ui_app_path"

    >
        <p class="label"><code>HOUDINI_UI_APP_PATH</code></p>
        <div class="content">


    <p >An application search path for .ui definition files. Use care when changing
    this path, otherwise the graphical Houdini applications may not start.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_audio_path"
        data-title="houdini_ui_audio_path"

    >
        <p class="label"><code>HOUDINI_UI_AUDIO_PATH</code></p>
        <div class="content">


    <p >An application search path for the audio notification files used by the
    interface. Use care in changing this path, otherwise audio notifications
    may stop working.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_cursor_path"
        data-title="houdini_ui_cursor_path"

    >
        <p class="label"><code>HOUDINI_UI_CURSOR_PATH</code></p>
        <div class="content">


    <p >An application search path for locating the Houdini mouse cursor set. Use
    care when changing this path, otherwise the mouse cursor may not reflect
    its current context.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_dialog_path"
        data-title="houdini_ui_dialog_path"

    >
        <p class="label"><code>HOUDINI_UI_DIALOG_PATH</code></p>
        <div class="content">


    <p >An application search path for locating the Houdini dialog files generated
    from states, handles, operators and HDAs. Use care when changing this path,
    otherwise the parameter pane will not show any user interface for the
    chosen objects.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_path"
        data-title="houdini_ui_path"

    >
        <p class="label"><code>HOUDINI_UI_PATH</code></p>
        <div class="content">


    <p >The base path for all user interface files. Use extreme care when changing
    this variable, or graphical Houdini applications may not start. Before
    adding paths to this variable, check the other <code>HOUDINI_UI</code> variables to see
    if one or more of those paths will accomplish what you need. Adding a new
    path to this variable can be expensive.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_template_path"
        data-title="houdini_ui_template_path"

    >
        <p class="label"><code>HOUDINI_UI_TEMPLATE_PATH</code></p>
        <div class="content">


    <p >An application search path for locating the parts Houdini uses to compose
    a user interface for states, handles, operators and HDAs. Use extreme care
    when changing this path. Houdini may not recover very well if the user
    interface parts are missing.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ui_icon_path"
        data-title="houdini_ui_icon_path"

    >
        <p class="label"><code>HOUDINI_UI_ICON_PATH</code></p>
        <div class="content">


    <p >The search path for icon files. Setting this path will override the
    default of <code>$HOUDINI_PATH/config/Icons</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_geometry_format"
        data-title="houdini_geometry_format"

    >
        <p class="label"><code>HOUDINI_GEOMETRY_FORMAT</code></p>
        <div class="content">


    <p >Specifies the default geometry format used when saving geometry.
    The default is to use the current version of Houdini’s version.
    Setting to <code>&#34;hclassic&#34;</code> will save geometry in Houdini 11&#39;s geometry
    format, which doesn’t support all the features of later formats.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_icon_cache_dir"
        data-title="houdini_icon_cache_dir"

    >
        <p class="label"><code>HOUDINI_ICON_CACHE_DIR</code></p>
        <div class="content">


    <p >The directory to store the cache of rendered icons in. By default, this
    cache is stored in <code>$HOUDINI_USER_PREF_DIR/config/Icons</code>. If your home
    directory is slow (for example, if home directories are stored on networked
    servers), setting this to a local path may help Houdini’s startup
    time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_vex_path"
        data-title="houdini_vex_path"

    >
        <p class="label"><code>HOUDINI_VEX_PATH</code></p>
        <div class="content">


    <p >The search path for VEX code.  Setting this path will override the
    default path of <code>$HOUDINI_PATH/vex/</code>.  Searching for the dialog
    scripts is independent of VEX searching and is controlled by the
    <code>HOUDINI_PATH</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_glsl_path"
        data-title="houdini_glsl_path"

    >
        <p class="label"><code>HOUDINI_GLSL_PATH</code></p>
        <div class="content">


    <p >The search path for GLSL code.  Setting this path will override the
    default path of <code>$HOUDINI_PATH/ogl2/</code>.  Searching for the dialog
    scripts is independent of GLSL searching and is controlled by the
    HOUDINI_PATH.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_asset_store_path"
        data-title="houdini_asset_store_path"

    >
        <p class="label"><code>HOUDINI_ASSET_STORE_PATH</code></p>
        <div class="content">


    <p >The search path for the user’s asset store related files (asset OTLs,
    licenses, list of installed assets, etc)</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_outlinefont_path"
        data-title="houdini_outlinefont_path"

    >
        <p class="label"><code>HOUDINI_OUTLINEFONT_PATH</code></p>
        <div class="content">


    <p >This is the path searched for Adobe Type 1 or True Type fonts used
    in the <a href="../nodes/sop/font.html" class="link   Node"title="Creates 3D text from Type 1, TrueType and OpenType fonts."><img src="../icons/SOP/font.svg"
         class="linkicon"


    />Font SOP</a> and <a href="../nodes/cop2/font.html" class="link   Node"title="Renders anti-aliased text."><img src="../icons/COP2/font.svg"
         class="linkicon"


    />Font COP</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_backup_dir"
        data-title="houdini_backup_dir"

    >
        <p class="label"><code>HOUDINI_BACKUP_DIR</code></p>
        <div class="content">


    <p >This is the directory used to store the backed-up hip files when the
    &ldquo;Numbered Backup&rdquo; save option is set.  <code>HOUDINI_BACKUP_DIR</code> must be set to a
    native file path.  Custom file system (FS) paths are not supported.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_backup_filename"
        data-title="houdini_backup_filename"

    >
        <p class="label"><code>HOUDINI_BACKUP_FILENAME</code></p>
        <div class="content">


    <p >A template for the filename used for file backups when the
    &ldquo;Numbered Backup&rdquo; save option is set.  Two variables are required:
    $BASENAME, which will be replaced by the name of the file being saved
    without its extension; and <code>$N</code>, which is replaced by the backup number.
    <code>$N</code> can be followed by a single digit which is interpreted as the number
    of digits to be used in the backup number; numbers with fewer digits than
    this will be padded with zeroes.  Default value is <code>$BASENAME_bak$N</code>.</p>



    <p >A subdirectory path may be included, but only <code>$BASENAME</code> will be replaced
    in this part of the template.  This may be used to group all the backups
    for a given file into a subdirectory (e.g. <code>$BASENAME/$BASENAME_bak$N</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_autosave_filename"
        data-title="houdini_autosave_filename"

    >
        <p class="label"><code>HOUDINI_AUTOSAVE_FILENAME</code></p>
        <div class="content">


    <p >A template for the filename used for auto save file backups when the
    &ldquo;Numbered Backup&rdquo; auto save option is set.  Two variables are required:
    <code>$BASENAME</code>, which will be replaced by the name of the file being saved
    without its extension; and <code>$N</code>, which is replaced by the backup number.
    <code>$N</code> can be followed by a single digit which is interpreted as the number
    of digits to be used in the backup number; numbers with fewer digits than
    this will be padded with zeroes.  Default value is <code>$BASENAME_auto$N</code>.</p>



    <p >A subdirectory path may be included, but only <code>$BASENAME</code> will be replaced
    in this part of the template.  This may be used to group all the backups
    for a given file into a subdirectory (e.g. <code>$BASENAME/$BASENAME_auto$N</code>).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_max_backup_files"
        data-title="houdini_max_backup_files"

    >
        <p class="label"><code>HOUDINI_MAX_BACKUP_FILES</code></p>
        <div class="content">


    <p >Setting this environment variable will limit the number of backup files
    Houdini creates when the &ldquo;Numbered Backup&rdquo; save option is set.  Setting
    this environment variable to 0 will disable the limit and Houdini will
    write as many backup files as resources permit (default). Once the limit
    is reached, the file with the oldest numbered suffix in the filename will
    be deleted.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_no_splash"
        data-title="houdini_no_splash"

    >
        <p class="label"><code>HOUDINI_NO_SPLASH</code></p>
        <div class="content">


    <p >Setting this environment variable will disable the Houdini splash screen
    from being displayed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_splash_message"
        data-title="houdini_splash_message"

    >
        <p class="label"><code>HOUDINI_SPLASH_MESSAGE</code></p>
        <div class="content">


    <p >Defines a custom message that will appear on the splash screen.  Placing
    the three character string //n in this message will place a new line in the
    splash screen.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_splash_file"
        data-title="houdini_splash_file"

    >
        <p class="label"><code>HOUDINI_SPLASH_FILE</code></p>
        <div class="content">


    <p >Defines a custom file to load for the splash screen.  You may want to
    augment this with the <code>HOUDINI_SPLASH_MESSAGE</code> to write build-specific
    information.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_bufferedsave"
        data-title="houdini_bufferedsave"

    >
        <p class="label"><code>HOUDINI_BUFFEREDSAVE</code></p>
        <div class="content">


    <p >When enabled, files are first saved to a memory buffer and then written to
    disk.  This is useful when saving over the network from Windows 2000
    machines, or other places where seeking to the network is expensive.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_viewerhandle_path"
        data-title="houdini_viewerhandle_path"

    >
        <p class="label"><code>HOUDINI_VIEWERHANDLE_PATH</code></p>
        <div class="content">


    <p >The search path for viewer handle files used for implementing python
    viewer handles. Houdini searches these files at startup to register
    viewer handles.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_viewerstate_path"
        data-title="houdini_viewerstate_path"

    >
        <p class="label"><code>HOUDINI_VIEWERSTATE_PATH</code></p>
        <div class="content">


    <p >The search path for viewer state files. These are python files used for
    implementing viewer states. Houdini searches them at startup to register
    standard and user-defined viewer states.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_husdplugins_path"
        data-title="houdini_husdplugins_path"

    >
        <p class="label"><code>HOUDINI_HUSDPLUGINS_PATH</code></p>
        <div class="content">


    <p >The search path for various Solaris python plugins. Subdirectories under
    this path will contain python modules that implement functionality used
    by, for example, the Scene Import LOP (to convert Object nodes to USD
    equivalents), and the Material Library LOP (to convert VOP nodes to
    UsdShade primitives).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_layoutplugins_path"
        data-title="houdini_layoutplugins_path"

    >
        <p class="label"><code>HOUDINI_LAYOUTPLUGINS_PATH</code></p>
        <div class="content">


    <p >The search path for plugin files related to layout tools, such as asset
    manager definitions.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini4_compatibility"
        data-title="houdini4_compatibility"

    >
        <p class="label"><code>HOUDINI4_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 4 are turned
    on.  This is designed to be used to allow old hip files to be
    loaded.  Support for these inconsistencies is not guaranteed in
    future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Change the order of points in Spheres, Tubes, Torii, and
      Circles under certain orientations.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >Reverse the direction of the Clip SOP’s &ldquo;distance&rdquo;
      parameter.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >Revert to the old capture region weighting method</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini55_compatibility"
        data-title="houdini55_compatibility"

    >
        <p class="label"><code>HOUDINI55_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 5.5 (and earlier) are
    turned on.  This is designed to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Not always use the shortest path rotation blending the PolyWire
      SOP and Composite CHOP</p>

    </li>



    <li class="bullet  ">


        <p class="label" >Revert to the old <code>boneangle()</code> behavior of calculating the angle
      between the two negative z axes of the given bones
      (Note that usually this expression would have been used as
      (180-boneangle(…)) which can easily be converted into the new
      behavior by no longer subtracting from 180)</p>

    </li>



    <li class="bullet  ">


        <p class="label" >The Switch Operators in POPs, SOPs, COP2s and SHOPs will not
      consolidate null inputs.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >When globbing channel patterns, the order will be reverted back to
      reverse creation order. This affects the Fetch CHOP, and the
      following hscript commands: <code>chls</code>, <code>chread</code>, <code>chwrite</code></p>

    </li>



    <li class="bullet  ">


        <p class="label" >The <code>&#34;tmgls -l&#34;</code> hscript command will revert to showing paths that
      start with /Director.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >Revert to the old behavior where when Houdini is told to look at
      something with an up vector that is parallel to the target
      direction, we do nothing.  This affects all of Houdini. This includes
      (but not limited to) the Look At parameter in all operators,
      the <code>mlookat()</code> expression function, and the <code>lookat()</code> VEX function.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini6_compatibility"
        data-title="houdini6_compatibility"

    >
        <p class="label"><code>HOUDINI6_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 6.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >With soft transforms (SoftPeak, SoftTransform, and Soft
      Options in the Edit SOP that are not applied) and Ignore
      Connectivity Off, connectivity does not respect the soft
      radius.  In Houdini 6.1 and later, two points are connected
      only if there is a sequence of edges within the soft radius
      that connects them.  In 6.0 and earlier, or with this flag
      on, they are connected if there is any sequence of edges
      that connects them.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >The <a href="../nodes/chop/fetch.html" class="link   Node"title="Imports channels from other OPs."><img src="../icons/COP2/fetch.svg"
         class="linkicon"


    />Fetch CHOP</a> will create the order of its fetched tracks in the
      following order:</p>

        <div class="content">

    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >animated channels (in the parameter order of fetched operator)</p>

    </li>



    <li class="bullet  ">


        <p class="label" >chop data tracks</p>

    </li>



    <li class="bullet  ">


        <p class="label" >non-animated parameters (again in parameter order)</p>

    </li>

    </ul>

        </div>

    </li>



    <li class="bullet  ">


        <p class="label" >The <a href="../nodes/sop/edit.html" class="link   Node"title="Edits points, edges, or faces interactively."><img src="../icons/SOP/edit.svg"
         class="linkicon"


    />Edit SOP</a> will use an old method for determining how a surface
      changes relative to the rest input.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini7_compatibility"
        data-title="houdini7_compatibility"

    >
        <p class="label"><code>HOUDINI7_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 7.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >The <a href="../nodes/chop/object.html" class="link   Node"title="Compares two objects and returns information on their relative
positions and orientations."><img src="../icons/CHOP/object.svg"
         class="linkicon"


    />Object CHOP</a> has a parameter <strong class="ui">Compute</strong> whose value
      <strong class="ui">Single Bearing Angle</strong> measures an angle between +z axis
      and the direction vector from source to target object. This
      angle was incorrectly decremented by 90 degrees in earlier versions.
      Right now, when a target object is right ahead of the source
      (measuring along z-axis), the angle is correctly computed as 0
      instead of -90 which would be the case in Houdini 7.0.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini8_compatibility"
        data-title="houdini8_compatibility"

    >
        <p class="label"><code>HOUDINI8_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 8.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >The global VOP variable list will include the illuminance global
      variables on only on nodes that are direct children of Illuminance
      VOPs. That is, the variables of deeply nested children will not be
      taken into consideration. Though omitting such variables is
      technically wrong, adding the illuminance variables to all child
      nodes of any depth would mess up the variable order and
      break existing VOP Networks.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >The csh-style variable modifiers will be disabled. Normally,
      Houdini uses <code>csh</code>-style modifiers to expand variables for <code>hscript</code> and
      Houdini. For example, for variable value of <code>ryan.cmd</code>, <code>$var:r</code>
      returns &ldquo;ryan&rdquo;.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini95_compatibility"
        data-title="houdini95_compatibility"

    >
        <p class="label"><code>HOUDINI95_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the quirks of Houdini 9.5 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >The <a href="../nodes/chop/xform.html" class="link  missing Node">Transform CHOP</a> will use the old (incorrect) interpretation of the
      Transform Order parameters.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini10_compatibility"
        data-title="houdini10_compatibility"

    >
        <p class="label"><code>HOUDINI10_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the backwards compatibility issues of Houdini
    10.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Provide old behavior of the <code>cycle()</code>, <code>cyclet()</code> <code>hscript</code> expressions
      and HOM functions.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini11_compatibility"
        data-title="houdini11_compatibility"

    >
        <p class="label"><code>HOUDINI11_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the backwards compatibility issues of Houdini
    11.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Patterns matching deprecated capture attributes names can match the
      modern capture attributes in the <a href="../nodes/sop/attribtransfer.html" class="link   Node"title="Transfers vertex, point, primitive, and/or
detail attributes between two models."><img src="../icons/SOP/attribtransfer.svg"
         class="linkicon"


    />Attribute Transfer SOP</a> and <a href="../nodes/sop/attribcomposite.html" class="link   Node"title="Composites vertex, point, primitive, and/or
detail attributes between two or more selections."><img src="../icons/SOP/attribcomposite.svg"
         class="linkicon"


    />Attribute
      Composite SOP</a>.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >The unix command will default to running <code>csh</code> instead of
      the value in the <code>$SHELL</code> variable.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >The operator type name specified for node creation will be used
      exactly as is, without <code>optype</code> namespace or version lookup.
      This is equivalent of always specifying <code>-e</code> for <code>opadd</code> or passing true
      as exact_type to <code>hou.Node.createNode()</code>.
      It allows scripts generated by <code>opscript</code> in H11 to always recreate
      exact node network, even if there are newer versions of some
      operators.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini17_compatibility"
        data-title="houdini17_compatibility"

    >
        <p class="label"><code>HOUDINI17_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the backwards compatibility issues of Houdini
    17.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Use old <code>cracktransform()</code> behavior for transform orders where rotates
      come before scales.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini11_perfmon_compatibility"
        data-title="houdini11_perfmon_compatibility"

    >
        <p class="label"><code>HOUDINI11_PERFMON_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, clicking on the Windows &gt; Performance Monitor
    menu entry will open the performance monitor that was available
    in Houdini 11.1 and earlier versions.  The 11.1 performance monitor
    also supplies performance data to the node information tooltip
    window (i.e. <span class="keys"><kbd>MMB</kbd></span> a node).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini10_volume_compatibility"
        data-title="houdini10_volume_compatibility"

    >
        <p class="label"><code>HOUDINI10_VOLUME_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled the <code>.bgeo</code> saving of volumes will use the untiled
    format compatible with early versions of 10.0 and earlier versions of
    Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini13_volume_compatibility"
        data-title="houdini13_volume_compatibility"

    >
        <p class="label"><code>HOUDINI13_VOLUME_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will turn off saving of shared data for volume
    primitives.  When this is enabled geometry files may be
    significantly larger and sharing information will be lost when
    re-loading geometry.  This usually only impacts geometry that has
    multiple copies of the same volume primitive.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini13_geo_compatibility"
        data-title="houdini13_geo_compatibility"

    >
        <p class="label"><code>HOUDINI13_GEO_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will enable the saving of <code>.geo/.bgeo</code> files compatible with
    13.0 versions of Houdini.  See also HOUDINI13_VOLUME_COMPATIBILITY.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini14_geo_compatibility"
        data-title="houdini14_geo_compatibility"

    >
        <p class="label"><code>HOUDINI14_GEO_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will enable the saving of <code>.geo/.bgeo</code> files compatible with
    14.0 versions of Houdini.  If this is not set, packed geometry
    primitives will not be loaded properly.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini15_parmdata_compatibility"
        data-title="houdini15_parmdata_compatibility"

    >
        <p class="label"><code>HOUDINI15_PARMDATA_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will enable the saving of geometry parameter data
    in a fashion compatible with early 15.0 and 15.5 versions of Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini15_5_geo_compatibility"
        data-title="houdini15_5_geo_compatibility"

    >
        <p class="label"><code>HOUDINI15_5_GEO_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will enable the saving of <code>.geo/.bgeo</code> files compatible with
    15.5 versions of Houdini.  If this is not set, files with polygons or
    tetrahedra saved in Houdini 16.0 or later will not be loaded properly in
    Houdini 15.5 or earlier.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini16_5_deform_compatibility"
        data-title="houdini16_5_deform_compatibility"

    >
        <p class="label"><code>HOUDINI16_5_DEFORM_COMPATIBILITY</code></p>
        <div class="content">


    <p >This setting will enable the old bone deform algorithm that allowed for
    separately deforming the two ends of capture regions by animating their end
    caps.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini6_filter_compatibility"
        data-title="houdini6_filter_compatibility"

    >
        <p class="label"><code>HOUDINI6_FILTER_COMPATIBILITY</code></p>
        <div class="content">


    <p >There was a large bug found in the low level filtering code in
    Houdini6.1.  Fixing this bug caused the results of filtering to
    change quite dramatically from previous versions.  To maintain
    previous behavior, this control can be set.  However, use of this
    control is discouraged since the filtering was incorrect before
    the fix.  This control may be removed in future versions of
    Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini13_filter_compatibility"
        data-title="houdini13_filter_compatibility"

    >
        <p class="label"><code>HOUDINI13_FILTER_COMPATIBILITY</code></p>
        <div class="content">


    <p >There was a large bug found in the mip-map computations for
    texturing in Houdini13.  Fixing this bug caused the results of
    filtering mip maps to change quite dramatically from previous
    versions.  To maintain previous behavior, this control can be
    set.  However, use of this control is discouraged since the
    filtering was incorrect before the fix.  This control may be
    removed in future versions of Houdini.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini18_compatibility"
        data-title="houdini18_compatibility"

    >
        <p class="label"><code>HOUDINI18_COMPATIBILITY</code></p>
        <div class="content">


    <p >When this is enabled, some of the backwards compatibility issues of Houdini
    18.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Use a broken KMeans++ method in the Cluster SOP, preserving the clusters
      that are generated.</p>

    </li>

    </ul>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_simplified_node_names"
        data-title="houdini_simplified_node_names"

    >
        <p class="label"><code>HOUDINI_SIMPLIFIED_NODE_NAMES</code></p>
        <div class="content">


    <p >When this is enabled, node names are not permitted to have <code>.</code> or <code>-</code>
    characters in them. By default these characters are allowed.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hipext"
        data-title="houdini_hipext"

    >
        <p class="label"><code>HOUDINI_HIPEXT</code></p>
        <div class="content">


    <p >When this variable is set, Houdini will no longer add the <code>.hip</code> extension
    from the Save dialog.  This also controls the addition of <code>.otl</code> and <code>.bgeo</code>
    extensions in the relevant save dialogs.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_access_method"
        data-title="houdini_access_method"

    >
        <p class="label"><code>HOUDINI_ACCESS_METHOD</code></p>
        <div class="content">


    <p >This value can be 0 (the default), 1, or 2. It selects the method used
    by Houdini to check file and directory permissions under Windows. 0 checks
    the permissions of the current user against the Windows user and group
    permissions set for the file in question. This method may be slow on
    machines that use a network login server. 1 uses a different method for
    checking the Windows user and group permissions, but relies on
    functionality that is broken in Windows 2000 Service Pack 2. Method 2
    simply checks the file attributes. This method is fast, but ignores the
    user and group permissions, and so may report that some files or
    directories can be written to when actually they cannot.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_cook_mode_threshold"
        data-title="houdini_cook_mode_threshold"

    >
        <p class="label"><code>HOUDINI_COOK_MODE_THRESHOLD</code></p>
        <div class="content">


    <p >Setting this variable will set a safety limit (in Megabytes) for the memory
    consumption of Houdini. If Houdini goes over this memory limit, it will
    immediately switch into the &ldquo;Never&rdquo; cook mode and alert the user. Setting
    this environment variable to 0 will disable this feature. This setting
    is only necessary when running on 32-bit operating systems.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hscript_safequit"
        data-title="hscript_safequit"

    >
        <p class="label"><code>HSCRIPT_SAFEQUIT</code></p>
        <div class="content">


    <p >If this variable is set, the quit command in <code>hscript</code> will prompt
    the user to verify that they want to quit.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="hscript_allow_background_render"
        data-title="hscript_allow_background_render"

    >
        <p class="label"><code>HSCRIPT_ALLOW_BACKGROUND_RENDER</code></p>
        <div class="content">


    <p >By default, <code>hbatch</code> will force renders to block <code>hbatch</code> until the
    render is complete.  Setting this variable will allow <code>hbatch</code> to
    render in the background.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_old_rats"
        data-title="houdini_old_rats"

    >
        <p class="label"><code>HOUDINI_OLD_RATS</code></p>
        <div class="content">


    <p >This variable controls the format for RAT file textures that will
    be generated by Houdini.  When it is set to 0, the new TBF file format
    will be used.  When set to 1, the old RAT format will be used.  The
    default value for this option is 0.  In general, TBF textures will
    have better performance, so this variable should only be enabled
    when a texture must be compatible with versions of Houdini prior
    to version 8.0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_qtml_use_gdi"
        data-title="houdini_qtml_use_gdi"

    >
        <p class="label"><code>HOUDINI_QTML_USE_GDI</code></p>
        <div class="content">


    <p >This variable is used to tell QuickTime to use GDI instead of DirectDraw
    or DCI on windows platforms.  GDI is forced when set to 1, and QuickTime
    makes the decision when set to 0.  The default value for this option is
    1 to avoid crashes in QuickTime dialog components that seem to be related
    to some nvidia drivers.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_max_cached_fbx_scenes"
        data-title="houdini_max_cached_fbx_scenes"

    >
        <p class="label"><code>HOUDINI_MAX_CACHED_FBX_SCENES</code></p>
        <div class="content">


    <p >Sets the maximum number of cached FBX scenes to keep in memory. Useful in
    scenes that link to multiple FBX files on disk to avoid reloading complete
    files every time a node cooks. The default value is 1, the minimum is 0,
    and the maximum is 20.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_transform_motionclip"
        data-title="houdini_transform_motionclip"

    >
        <p class="label"><code>HOUDINI_TRANSFORM_MOTIONCLIP</code></p>
        <div class="content">


    <p >When this is enabled, the results of evaluating a MotionClip will be
    transformed by the intrinsic transform matrices of its packed geometries.
    With this enabled, MotionClips can be altered by nodes such as the Transform
    SOP. By default, this is enabled.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_netexchange_heartbeat"
        data-title="houdini_netexchange_heartbeat"

    >
        <p class="label"><code>HOUDINI_NETEXCHANGE_HEARTBEAT</code></p>
        <div class="content">


    <p >When a distributed simulation is exchanging data with other nodes it
    will often block while waiting for the other nodes to catch up.  During
    this time the process can appear dead because it is no longer using any
    CPU.  When this heartbeat is a non-zero positive value, it represents the
    number of seconds between printing out heartbeats to standard out, thereby
    reminding the world that this process is still alive.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_netexchange_minpacketsize"
        data-title="houdini_netexchange_minpacketsize"

    >
        <p class="label"><code>HOUDINI_NETEXCHANGE_MINPACKETSIZE</code></p>
        <div class="content">


    <p >During a distributed pressure solve many small packets are sent.
    Some network configurations may delay sending small packets, choosing
    to delay them until additional data shows up.   This option specifies
    the size in bytes of the minimum packet to send during the interchange.
    Using ping -s may allow one to determine what packet sizes are sent
    reliably by your network.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_netexchange_quickack"
        data-title="houdini_netexchange_quickack"

    >
        <p class="label"><code>HOUDINI_NETEXCHANGE_QUICKACK</code></p>
        <div class="content">


    <p >Set the <code>TCP_QUICKACK</code> hint to the read sockets when performing piped
    transfers.  This will will immediately send ACKs rather than waiting
    for latency-inducing timeouts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dopvolume_nantest"
        data-title="houdini_dopvolume_nantest"

    >
        <p class="label"><code>HOUDINI_DOPVOLUME_NANTEST</code></p>
        <div class="content">


    <p >When enabled the various DOP gas micro solvers will scan their fields for
    NANs before and after processing.  This can be useful for finding where
    these numbers are showing up in a simulation.  It is helpful to set
    <code>perfmon -o stdout</code> first so one can tell which micro-solver is operating
    when the NaN test outputs an error.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_multithreaded_cooking"
        data-title="houdini_multithreaded_cooking"

    >
        <p class="label"><code>HOUDINI_MULTITHREADED_COOKING</code></p>
        <div class="content">


    <p >EXPERIMENTAL: When enabled, Houdini will attempt to perform multithreaded
    node cooking where possible.  As of Houdini 11, cooking problems can occur
    such as deadlocks if enabled. Note that this environment setting currently
    does NOT affect anything other than viewport object cooking.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_nested_multithreading"
        data-title="houdini_disable_nested_multithreading"

    >
        <p class="label"><code>HOUDINI_DISABLE_NESTED_MULTITHREADING</code></p>
        <div class="content">


    <p >When multithreaded algorithms nest, the inner algorithm will also
    multithread, relying on task-based parallelism.  However, Houdini’s
    original multithreaded systems assumed no nesting.  Setting this to 1
    will disable nested multithreading in the old-style algorithms, which
    likely results in slower and less efficient multithreading.  However,
    in case deadlocks or other problems are discovered, this flag can
    be used to restore the old behavior to see if this change is the cause.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_fixedvoxelsize"
        data-title="houdini_ogl_fixedvoxelsize"

    >
        <p class="label"><code>HOUDINI_OGL_FIXEDVOXELSIZE</code></p>
        <div class="content">


    <p >Instead of scaling the density of voxels in volumes by their size, all
    voxels are treated as if they were 1×1×1 cubes when computing opacity for
    display.  This results in things appearing more opaque if they are higher
    resolution.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_volumeshading"
        data-title="houdini_ogl_volumeshading"

    >
        <p class="label"><code>HOUDINI_OGL_VOLUMESHADING</code></p>
        <div class="content">


    <p >Houdini uses GPU compute shaders to apply lights to smoke volumes on
    hardware that supports it. When this environment variable is set to 0,
    a different technique is used to perform lower-quality shading on the CPU
    instead.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_vendor"
        data-title="houdini_ocl_vendor"

    >
        <p class="label"><code>HOUDINI_OCL_VENDOR</code></p>
        <div class="content">


    <p >Specifies the platform vendor to choose when creating the OpenCL
    context Houdini uses for OpenCL processing.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_devicetype"
        data-title="houdini_ocl_devicetype"

    >
        <p class="label"><code>HOUDINI_OCL_DEVICETYPE</code></p>
        <div class="content">


    <p >Specifies the type of OpenCL device to use for OpenCL processing.  The
    choices are GPU and CPU.  If HOUDINI_OCL_VENDOR is set, then once a
    platform vendor is identified, only devices of the specified type will
    be used.  If HOUDINI_OCL_VENDOR is not set, then all available OpenCL
    platforms will be searched and the first device of the specified type
    returned.  Setting this variable is therefore and easy way to switch
    devices.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_devicenumber"
        data-title="houdini_ocl_devicenumber"

    >
        <p class="label"><code>HOUDINI_OCL_DEVICENUMBER</code></p>
        <div class="content">


    <p >In the case of multiple OpenCL devices existing of the type specified by
    HOUDINI_OCL_DEVICETYPE, this variable selects which of these devices to
    use for OpenCL processing.  For example, with a computer with more than
    one GPU this allows selection of a GPU other than the default for OpenCL.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_path"
        data-title="houdini_ocl_path"

    >
        <p class="label"><code>HOUDINI_OCL_PATH</code></p>
        <div class="content">


    <p >The search path for OpenCL kernels.  Setting this path will override the
    default path of <code>$HOUDINI_PATH/ocl/</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_memory_pool_size"
        data-title="houdini_ocl_memory_pool_size"

    >
        <p class="label"><code>HOUDINI_OCL_MEMORY_POOL_SIZE</code></p>
        <div class="content">


    <p >Houdini uses a memory pool for allocating device memory through OpenCL for
    improved performance and to decrease fragmentation.  This variable is the
    percentage of total device memory to allocate for the pool. For example, the
    default setting of 0.125 will allocate 1/8 of device memory for the memory
    pool.  Note that if the specified OpenCL device is 32-bit, the total device
    memory is clamped to 4GB before being multiplied by this percentage.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_report_build_logs"
        data-title="houdini_ocl_report_build_logs"

    >
        <p class="label"><code>HOUDINI_OCL_REPORT_BUILD_LOGS</code></p>
        <div class="content">


    <p >When enabled, Houdini will output the build log of every OpenCL
    kernel that it compiles.   This allows you to inspect warnings.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_report_memory_use"
        data-title="houdini_ocl_report_memory_use"

    >
        <p class="label"><code>HOUDINI_OCL_REPORT_MEMORY_USE</code></p>
        <div class="content">


    <p >When enabled, Houdini will output OpenCL memory usage statistics after
    every set of OpenCL kernel calls.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_ogl_interop"
        data-title="houdini_ocl_ogl_interop"

    >
        <p class="label"><code>HOUDINI_OCL_OGL_INTEROP</code></p>
        <div class="content">


    <p >Houdini attempts to share OpenCL buffers with OpenGL for rendering when
    this is possible. Setting this environment variable to 0 disables this
    interoperability between OpenCL and OpenGL.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_feature_disable"
        data-title="houdini_ocl_feature_disable"

    >
        <p class="label"><code>HOUDINI_OCL_FEATURE_DISABLE</code></p>
        <div class="content">


    <p >A list of OpenCL device features that will be disabled in Houdini, which
    can be helpful for debugging device failures. These mostly correspond to
    OpenCL 3.0 feature support flags, e.g. CL_DEVICE_DEVICE_ENQUEUE_SUPPORT.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ocl_image_advection"
        data-title="houdini_ocl_image_advection"

    >
        <p class="label"><code>HOUDINI_OCL_IMAGE_ADVECTION</code></p>
        <div class="content">


    <p >The <a href="../nodes/dop/gasadvectcl.html" class="link   Node"title="A microsolver that advects fields by a velocity field using OpenCL acceleration."><img src="../icons/DOP/gas.svg"
         class="linkicon"


    />Gas Advect CL</a> DOP tries to convert the velocity
    field to an image before performing the advection. Setting this environment
    variable to <code>0</code> will force this DOP to avoid the image conversion.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_iobuffer_size"
        data-title="houdini_iobuffer_size"

    >
        <p class="label"><code>HOUDINI_IOBUFFER_SIZE</code></p>
        <div class="content">


    <p >The number of megabytes to spool into the background output thread
    before blocking the addition of new write tasks.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_dop_maxcache"
        data-title="houdini_dop_maxcache"

    >
        <p class="label"><code>HOUDINI_DOP_MAXCACHE</code></p>
        <div class="content">


    <p >Sets a maximum DOP cache size in megabytes.  Even if the DOP node
    has a cache size larger than this specified, it will be clamped
    by this amount.  If negative (the default) no clamping is done.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_sop_disable_cachenode"
        data-title="houdini_sop_disable_cachenode"

    >
        <p class="label"><code>HOUDINI_SOP_DISABLE_CACHENODE</code></p>
        <div class="content">


    <p >The Cache SOP is disabled if this option is set.</p>



    <p >NOTE: This may break networks that rely on caching, and/or greatly
    slow down networks by causing recooking where caching was used.</p>



    <p >It can be useful if Cache SOPs are only used for playblast and
    one wants to ensure a farm machine doesn’t accumulate memory.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_sop_disable_compilenode"
        data-title="houdini_sop_disable_compilenode"

    >
        <p class="label"><code>HOUDINI_SOP_DISABLE_COMPILENODE</code></p>
        <div class="content">


    <p >The <a href="../nodes/sop/block_end.html" class="link   Node"title="The end/output of a looping block."><img src="../icons/SOP/block_end.svg"
         class="linkicon"


    />Block End Compile SOP</a> will always be non-compiled if this is set.</p>



    <p >This is useful if you want to do performance testing to see differences
    between compiled and non-compiled settings, or rule out compiling
    as a source of a bug.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_run_in_foreground"
        data-title="houdini_run_in_foreground"

    >
        <p class="label"><code>HOUDINI_RUN_IN_FOREGROUND</code></p>
        <div class="content">


    <p >If set to 1, Houdini GUI applications will by default run as a foreground
    application, if run form a shell or a terminal. Otherwise, GUI applications
    will put themselves in the background, no longer associated with the
    shell or terminal. This option has no effect on OSX.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_ogl_fast_bones"
        data-title="houdini_ogl_fast_bones"

    >
        <p class="label"><code>HOUDINI_OGL_FAST_BONES</code></p>
        <div class="content">


    <p >When enabled, nulls and bones rendering is done by accumulating
    all the objects and issuing one instanced drawing call.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_fast_transform_handles"
        data-title="houdini_fast_transform_handles"

    >
        <p class="label"><code>HOUDINI_FAST_TRANSFORM_HANDLES</code></p>
        <div class="content">


    <p >Enable experimental feature to use a single vertex shader to draw all the
    transform handle parts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_distributedprojection_diagnostics"
        data-title="houdini_distributedprojection_diagnostics"

    >
        <p class="label"><code>HOUDINI_DISTRIBUTEDPROJECTION_DIAGNOSTICS</code></p>
        <div class="content">


    <p >Perform extra checks to verify distributed slices are building
    coherent projection matrices during distributed pressure solves.
    Turn this on if distributed solves are failing to converge to
    get extra diagnostic information to submit.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_sas_disable_asset_download"
        data-title="houdini_sas_disable_asset_download"

    >
        <p class="label"><code>HOUDINI_SAS_DISABLE_ASSET_DOWNLOAD</code></p>
        <div class="content">


    <p >If set to 1, prevents graphical Houdini from downloading assets
    (i.e. Simple Toon Character) from Orbolt that are regularly installed in
    every Houdini distribution.  Default is 0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_use_hfs_ocl"
        data-title="houdini_use_hfs_ocl"

    >
        <p class="label"><code>HOUDINI_USE_HFS_OCL</code></p>
        <div class="content">


    <p >Set to its default value of 1, this variable tells Houdini to load the
    built-in CPU OpenCL driver that is shipped in $HFS (64-bit Windows and Linux only).
    This built-in CPU device can be selected using the regular OpenCL
    device specifications, e.g. <code>HOUDINI_OCL_DEVICETYPE=CPU</code>.</p>



    <p >Houdini will also fall back to using this  driver if the usual OpenCL
    device selection process fails, making it safer to submit OpenCL jobs to a
    renderfarm that has no GPUs.  Set this variable to 2 to disable this
    fallback mechanism, or 0 to disable the built-in device completely.</p>



    <p >If this environment variable is set to zero in the underlying operating
    system via the command-line or registry, then the built-in driver will never
    be loaded into memory at all, avoiding some crashing issues with virtual
    display drivers.  However, if it is set to zero in houdini.env, the built-in
    driver will be loaded into memory but ignored for device selection.</p>



    <p >On OSX this variable has no effect.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_audio_server"
        data-title="houdini_disable_audio_server"

    >
        <p class="label"><code>HOUDINI_DISABLE_AUDIO_SERVER</code></p>
        <div class="content">


    <p >If set to 1, prevents the Audio Server from initializing.
    Default is 0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="qt_mouse_compress_limit"
        data-title="qt_mouse_compress_limit"

    >
        <p class="label"><code>QT_MOUSE_COMPRESS_LIMIT</code></p>
        <div class="content">


    <p >On Linux, Qt compresses mouse move events for improved performance.
    Compression works by issuing out a single mouse event to the application
    for a group of mouse events that occurred within a small time period.
    The downside to mouse event compression is that it diminishes the quality
    for operations that track mouse movement (i.e. drawing curves in the
    viewport).  This is why Houdini disables mouse event compression by default.</p>



    <p >You can turn compression back on by setting QT_MOUSE_COMPRESS_LIMIT to a
    non-zero, integer value.  The value represents the maximum number of mouse
    move events to be compressed for each compression run.  The higher the
    limit the more compression that is allowed.</p>



    <p >Set this variable only if you are experiencing slow response times when
    interacting with Houdini’s viewport or any interface in Houdini that tracks
    mouse movement (i.e. an OpenGL viewport written in PySide or PyQt).</p>



    <p >This variable affects only Linux.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_chop_motion_samples"
        data-title="houdini_chop_motion_samples"

    >
        <p class="label"><code>HOUDINI_CHOP_MOTION_SAMPLES</code></p>
        <div class="content">


    <p >This variable overrides the Global Animation Settings CHOP Motion Samples
    value if the hchannel.pref file isn’t present.
    It can be use to increase the CHOP sampling rate for Constraints at render time.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nvidia_optix_dso_path"
        data-title="houdini_nvidia_optix_dso_path"

    >
        <p class="label"><code>HOUDINI_NVIDIA_OPTIX_DSO_PATH</code></p>
        <div class="content">


    <p >Defines the OptiX DSO search path. The existence of this variable
    also determines whether the IPR toolbox enables the denoise button or not.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nvidia_optix_devicenumber"
        data-title="houdini_nvidia_optix_devicenumber"

    >
        <p class="label"><code>HOUDINI_NVIDIA_OPTIX_DEVICENUMBER</code></p>
        <div class="content">


    <p >Device ID to use for OptiX denoiser. Use &ldquo;hgpuinfo -o&rdquo; to determine OptiX
    device IDs. Leave it undefined or -1 to use the first device.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_window_redraw_rate"
        data-title="houdini_window_redraw_rate"

    >
        <p class="label"><code>HOUDINI_WINDOW_REDRAW_RATE</code></p>
        <div class="content">


    <p >Defines the number of milliseconds between windows redraws. This can be useful on
    remote desktop sessions or on recording sessions. Default value is 0, which doesn’t use a redraw timer.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_package_dir"
        data-title="houdini_package_dir"

    >
        <p class="label"><code>HOUDINI_PACKAGE_DIR</code></p>
        <div class="content">


    <p >Specifies one or multiple custom directory paths Houdini can use for scanning package files.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_package_verbose"
        data-title="houdini_package_verbose"

    >
        <p class="label"><code>HOUDINI_PACKAGE_VERBOSE</code></p>
        <div class="content">


    <p >Enables the logging of messages to the console during package processing.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_package_skip"
        data-title="houdini_package_skip"

    >
        <p class="label"><code>HOUDINI_PACKAGE_SKIP</code></p>
        <div class="content">


    <p >Disables the package processing.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_viewer_state_verbose"
        data-title="houdini_viewer_state_verbose"

    >
        <p class="label"><code>HOUDINI_VIEWER_STATE_VERBOSE</code></p>
        <div class="content">


    <p >Enables the logging of messages to the console during the viewer state registration at startup.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_error_on_illegal_node_edits"
        data-title="houdini_error_on_illegal_node_edits"

    >
        <p class="label"><code>HOUDINI_ERROR_ON_ILLEGAL_NODE_EDITS</code></p>
        <div class="content">


    <p >Set this to 0 to prevent errors from being thrown when modifying the scene
    while cooking. This environment variable exists solely as an escape hatch
    to allow illegal behavior. It will be removed without notice in the future
    where illegal node edits will be permanently disallowed.</p>



    <p >Currently, this applies to destroying nodes in Python while cooking. If you
    disable this, Houdini is liable to crash at any moment when using a scene
    that does this.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_sop_memory_tracking"
        data-title="houdini_disable_sop_memory_tracking"

    >
        <p class="label"><code>HOUDINI_DISABLE_SOP_MEMORY_TRACKING</code></p>
        <div class="content">


    <p >Disables the memory tracking of the SOP cache manager.
    This can be used to remove the overhead of computing the consumed memory.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_load_verification"
        data-title="houdini_load_verification"

    >
        <p class="label"><code>HOUDINI_LOAD_VERIFICATION</code></p>
        <div class="content">


    <p >When enabled, attempts to fix problems by performing additional
    verification checks when loading. This currently only checks spare
    parameters when loading nodes. Disabled by default.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_disable_pdg"
        data-title="houdini_disable_pdg"

    >
        <p class="label"><code>HOUDINI_DISABLE_PDG</code></p>
        <div class="content">


    <p >When enabled, PDG node types will not be created at startup.  This will be a
    minor improvement for startup time but will make TOP nodes inoperable.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_cache_debug"
        data-title="houdini_pdg_cache_debug"

    >
        <p class="label"><code>HOUDINI_PDG_CACHE_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print output file cache information during the
    cook. By default this is disabled, but setting it to a value between 1 and 4
    will enable debug output:</p>



    <p >Setting the value to 1 will enable logging of cache misses due to stale
    or missing cache entries, or work items that always write files.</p>



    <p >Setting the value to 2 will print all of the same information, as well as
    cache hits and updates to the cache file table.</p>



    <p >A value of 3 will cause PDG to also print a message each time a work item’s
    cache id is incremented or synchronized from its dependencies.</p>



    <p >In addition to the above, a value of 4 will cause PDG to print a message
    each time a <a href="../tops/custom_tags.html" class="link   None"title="PDG uses file tags to determine the type of an output file.">custom cache or dirty handler</a> successfully
    processes a file or work item.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_expr_debug"
        data-title="houdini_pdg_expr_debug"

    >
        <p class="label"><code>HOUDINI_PDG_EXPR_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print out attribute expression debug information
    during the cook. By default this is disabled, but setting it to a value
    between 1 and 3 will enable debug output:</p>



    <p >Setting the value to 1 will enable logging of attributes that have been
    marked as time dependent, and attributes that have been dirtied. In both
    cases the log messages will only appear in batch worker processes that are
    evaluating networks via PDG, such as the ROP Fetch or HDA Processor. PDG
    work item attributes are not time dependent in the process that is
    evaluating the TOP network.</p>



    <p >Setting the value to 2 will enable logging of all attribute evaluations
    from parameters that reference work item attributes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_node_debug"
        data-title="houdini_pdg_node_debug"

    >
        <p class="label"><code>HOUDINI_PDG_NODE_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print out node status information during the cook.
    This option can be used to debug graphs that have hung, or to get extra
    logging information regarding the number of nodes that completed. By default
    this is disabled, but setting it to a value between 1 and 3 will enable
    varying levels of node debug output:</p>



    <p >Setting the value to 1 will enable a status print out message each time a
    node finishes generating or partitioning work items, and when all work items
    in that node finish cooking.</p>



    <p >Setting the value to 2 will print the messages from the previous debug level,
    as well as any node error messages.</p>



    <p >Setting the value to 3 will print node generation/cook status, errors and
    node warnings.</p>



    <p >Setting the value to 4 will print all of the previously mentioned messages,
    as well as a message for each node callback invocation.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_scheduler_debug"
        data-title="houdini_pdg_scheduler_debug"

    >
        <p class="label"><code>HOUDINI_PDG_SCHEDULER_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print out scheduler status information during the
    cook. This option can be used to debug issues with schedulers, or get
    extra information about what’s happening in the graph. By default this
    variable is disabled, but setting it to a value of either 1 or 2 will enable
    logging:</p>



    <p >Setting the value to 1 will enable a status message for scheduler events,
    such as a cook starting or canceling.</p>



    <p >Setting the value to 2 will enable all messages from the previous debug
    level, as well as messages that relate to scheduling work items.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_transfer_debug"
        data-title="houdini_pdg_transfer_debug"

    >
        <p class="label"><code>HOUDINI_PDG_TRANSFER_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print file transfer status information during the
    cook. This can be used to debug custom file transfer handlers or track down
    which files the graph is trying to copy into the remote working directory.</p>



    <p >By default this option is disabled.</p>



    <p >Setting this variable to a value of 1 will enable log messages for any
    failed file transfers.</p>



    <p >Setting the variable to 2 will also enable logging of successful transfers,
    in addition to failures.</p>



    <p >Setting the variable to 3 will enable all transfer logging, in addition to
    successful/failed transfers. This includes files that were skipped because
    they hadn’t been modified between transfers, or have the same local and
    remote path.</p>



    <p >Finally, setting the variable to 4 enables all of the above as well as
    special print outs for debugging any custom transfer handlers.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_work_item_debug"
        data-title="houdini_pdg_work_item_debug"

    >
        <p class="label"><code>HOUDINI_PDG_WORK_ITEM_DEBUG</code></p>
        <div class="content">


    <p >Determines if PDG should print work item status information during the cook.
    This can help track down when a work item fails, or provide verbose output
    that gets consumed by a farm system or build scheduler for tracking progress.</p>



    <p >By default this option is disabled.</p>



    <p >Setting this variable to a value of 1 will enable log messages for all work
    items that cook with a scheduler. This includes items that cook in-process
    like the Invoke, but excludes work items like the ones in an Attribute Create
    which don’t do any work while cooking. This log level makes it possible to
    only see log messages for items that are doing &ldquo;real&rdquo; work.</p>



    <p >Setting this variable to a value of 2 will enable the same logging as level
    1, but for all types of work items. This includes partitions and items in
    nodes like the Attribute Create TOP which don’t do anything when they cook.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_type_error"
        data-title="houdini_pdg_type_error"

    >
        <p class="label"><code>HOUDINI_PDG_TYPE_ERROR</code></p>
        <div class="content">


    <p >Determines if errors when loading PDG node and scheduler definitions
    should be printed to the console.  This can help in debugging problems
    loading custom node types.</p>



    <p >By default this is disabled.</p>



    <p >The existence of the variable in the environment (or setting its
    value to 1) will cause loading errors to be printed.</p>



    <p >Setting the value to 2 will cause PDG to print a message for each
    node type that it loads.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_enable_hom_asserts"
        data-title="houdini_enable_hom_asserts"

    >
        <p class="label"><code>HOUDINI_ENABLE_HOM_ASSERTS</code></p>
        <div class="content">


    <p >When enabled, <code>hou.assertTrue(condition)</code> will raise an <code>AssertionError</code>
    when <code>condition</code> evaluates to <code>False</code>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_bgeo_to_usd_default_args"
        data-title="houdini_bgeo_to_usd_default_args"

    >
        <p class="label"><code>HOUDINI_BGEO_TO_USD_DEFAULT_ARGS</code></p>
        <div class="content">


    <p >A string that specifies a default set of arguments that are used by the
    USD plugin for loading BGEO files. These arguments should be expressed in
    the same form they would be when passing them as part of the asset path.
    These default arguments are treated with lower priority than either
    arguments passed as part of the asset path or any detail attributes set in
    the BGEO file.</p>



    <p >The accepted arguments match the names of the detail attributes that are
    created by the USD Configure SOP, but with the &#39;usdconfig&#39; prefix removed.
    See the help for that node for more information about all the available
    arguments.</p>


    <div class="defs">



    <div id="sampleframe-1" class="def  ">
        <p class="label "><code>sampleframe=1</code>
        </p>
        <div class="content">

    <p >Causes the plugin to author geometry attributes as time samples at
        time code 1, rather than as default values.</p>

</div>
    </div>



    <div id="sampleframe-1-topology-animated" class="def  ">
        <p class="label "><code>sampleframe=1&amp;topology=animated</code>
        </p>
        <div class="content">

    <p >Authors geometry attributes as time samples at time code 1, and also
        forces topology attributes to be authored as time samples.</p>

</div>
    </div>

    </div>

        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hserver_use_http"
        data-title="houdini_hserver_use_http"

    >
        <p class="label"><code>HOUDINI_HSERVER_USE_HTTP</code></p>
        <div class="content">

    <div class="defs">



    <div id="enable-http-communication-when-requesting-a-license-from-hserver-the-behavior-of-houdini-varies-depending-on-the-value" class="def  ">
        <p class="label ">Enable http communication when requesting a license from hserver. The
    behavior of Houdini varies depending on the value.
        </p>
        <div class="content">

    <p ><code>0</code>: do not enable http and only use the legacy protocol.
        <code>1</code>: allow the use of http if available. If for some reason the request did not succeed then fallback to the legacy protocol.
        <code>2</code>: only use http and do not fallback to the legacy protocol if needed.</p>

</div>
    </div>

    </div>


    <p >The default value is 0.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hserver_port"
        data-title="houdini_hserver_port"

    >
        <p class="label"><code>HOUDINI_HSERVER_PORT</code></p>
        <div class="content">


    <p >Define the default port to use when trying to connect to the local hserver
    process. If this environment variable is not set the default value is 1714.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_lic_api_version"
        data-title="houdini_lic_api_version"

    >
        <p class="label"><code>HOUDINI_LIC_API_VERSION</code></p>
        <div class="content">


    <p >Specify what license API version to use. This is useful if you want to
    upgrade your license system past what was shipped with and to enable
    experimental features.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_lop_placeholder_layers"
        data-title="houdini_lop_placeholder_layers"

    >
        <p class="label"><code>HOUDINI_LOP_PLACEHOLDER_LAYERS</code></p>
        <div class="content">


    <p >Specify the number of empty placeholder layers that should be added to LOP
    node stages when they are created. These placeholder layers allow LOPs to
    modify the stage without modifying the layer stack, which is a relatively
    expensive operation. The default value is 4.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_api_key_file"
        data-title="houdini_api_key_file"

    >
        <p class="label"><code>HOUDINI_API_KEY_FILE</code></p>
        <div class="content">


    <p >Specify the api key file to be used by hkey and sesictrl. This provides a
    way to make api calls without the need to login with an email and password.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hdadynamicpayload_cachesize"
        data-title="houdini_hdadynamicpayload_cachesize"

    >
        <p class="label"><code>HOUDINI_HDADYNAMICPAYLOAD_CACHESIZE</code></p>
        <div class="content">


    <p >For loading HDA payloads in USD. The geometry data from the HDA will temporarily
    be cached in case it needs to be accessed again in a short period of time. This
    will specify the maximum size of the cache in MB.</p>



    <p >By default the maximum cache size is 128 MB.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini19_checkout_system"
        data-title="houdini19_checkout_system"

    >
        <p class="label"><code>HOUDINI19_CHECKOUT_SYSTEM</code></p>
        <div class="content">


    <p >Starting with Houdini 19 there is a new licensing system that is available.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_lic_opt"
        data-title="houdini_lic_opt"

    >
        <p class="label"><code>HOUDINI_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_core_lic_opt"
        data-title="houdini_core_lic_opt"

    >
        <p class="label"><code>HOUDINI_CORE_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini Core Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_fx_lic_opt"
        data-title="houdini_fx_lic_opt"

    >
        <p class="label"><code>HOUDINI_FX_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini FX Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_indie_lic_opt"
        data-title="houdini_indie_lic_opt"

    >
        <p class="label"><code>HOUDINI_INDIE_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini Indie Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_nc_lic_opt"
        data-title="houdini_nc_lic_opt"

    >
        <p class="label"><code>HOUDINI_NC_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini Apprentice Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_exper_lic_opt"
        data-title="houdini_exper_lic_opt"

    >
        <p class="label"><code>HOUDINI_EXPER_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Houdini Experimental Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_pdg_lic_opt"
        data-title="houdini_pdg_lic_opt"

    >
        <p class="label"><code>HOUDINI_PDG_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all PilotPDG Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_hython_lic_opt"
        data-title="houdini_hython_lic_opt"

    >
        <p class="label"><code>HOUDINI_HYTHON_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all hython and hbatch Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mantra_lic_opt"
        data-title="houdini_mantra_lic_opt"

    >
        <p class="label"><code>HOUDINI_MANTRA_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Mantra Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_karma_lic_opt"
        data-title="houdini_karma_lic_opt"

    >
        <p class="label"><code>HOUDINI_KARMA_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Karma Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_mplay_lic_opt"
        data-title="houdini_mplay_lic_opt"

    >
        <p class="label"><code>HOUDINI_MPLAY_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Mplay Applications.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_plugin_lic_opt"
        data-title="houdini_plugin_lic_opt"

    >
        <p class="label"><code>HOUDINI_PLUGIN_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to all Plugin Applications. Note
    Unreal and Unity have their own environment variables to control licensing.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_unreal_plugin_lic_opt"
        data-title="houdini_unreal_plugin_lic_opt"

    >
        <p class="label"><code>HOUDINI_UNREAL_PLUGIN_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to the Unreal Plugin.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_unity_plugin_lic_opt"
        data-title="houdini_unity_plugin_lic_opt"

    >
        <p class="label"><code>HOUDINI_UNITY_PLUGIN_LIC_OPT</code></p>
        <div class="content">


    <p >Defines the list of options to apply to the Unity Plugin.
    For more information, see <a href="utils/hserver.html#licensingsystem" class="link   None">hserver</a>.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_default_log_sources"
        data-title="houdini_default_log_sources"

    >
        <p class="label"><code>HOUDINI_DEFAULT_LOG_SOURCES</code></p>
        <div class="content">


    <p >Controls which logging sources are collected by the log viewer pane when
    Houdini is started. Defaults to an empty string to indicate that no
    logging information should be collected by default. This value should be
    a sequence of tokens separated by spaces. Tokens with spaces can be
    enclosed in quotes. Wildcards are allowed within a token.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_bearer_tokens"
        data-title="houdini_bearer_tokens"

    >
        <p class="label"><code>HOUDINI_BEARER_TOKENS</code></p>
        <div class="content">


    <p >Controls the OAuth2 bearer access token to be added as an Authorization
    header when making GET requests to a server. The format of the string
    is <code>&lt;domain of url&gt;:&lt;access token&gt;</code>. To add multiple tokens add a <code>;</code>
    before listing the next token. Note that only one access token can exist
    for each domain. For example, <code>www.sidefx.com:abcdef;www.google.com:tfalkj</code>
    specifies two tokens. The first being for www.sidefx.com with value abcdef
    and the second being for www.google.com with value tfalkj.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_console_python_panel_error"
        data-title="houdini_console_python_panel_error"

    >
        <p class="label"><code>HOUDINI_CONSOLE_PYTHON_PANEL_ERROR</code></p>
        <div class="content">


    <p >Errors when starting python panels will also be sent to the console,
    instead of just displaying them within the panel.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_assetgallery_db_file"
        data-title="houdini_assetgallery_db_file"

    >
        <p class="label"><code>HOUDINI_ASSETGALLERY_DB_FILE</code></p>
        <div class="content">


    <p >Filename or full path to the file to use for the asset gallery database.</p>



    <p >If this is an absolute path or a path relative to &#39;.&#39;, the file will be
    created at the specified location if it doesn’t already exist.</p>



    <p >If this is just a file name, Houdini will look for the file in
    HOUDINI_PATH and if it can’t be found then it will be created in
    $HOME/houdiniVERSION.</p>



    <p >The default value is &ldquo;assetGallery.db&rdquo;.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="houdini_viewport_info_max_fps"
        data-title="houdini_viewport_info_max_fps"

    >
        <p class="label"><code>HOUDINI_VIEWPORT_INFO_MAX_FPS</code></p>
        <div class="content">


    <p >Defines the maximum frame per second number that the viewport info will
    display before clamping it. The default value is 120.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_license_mode"
        data-title="pdg_license_mode"

    >
        <p class="label"><code>PDG_LICENSE_MODE</code></p>
        <div class="content">


    <p >Restrict PilotPDG or <code>hython --pdg</code> to use specific type of fallback license.
    A PDG license will always be tried first. If that fails, the default
    fallback behavior is to try Houdini Engine, then Core, then finally FX
    licenses. The following values can override this behavior:</p>


    <div class="defs">



    <div id="pdg_only" class="def  ">
        <p class="label "><code>pdg_only</code>
        </p>
        <div class="content">

    <p >Only use PDG license. No other fallback licenses are allowed.</p>

</div>
    </div>



    <div id="engine_only" class="def  ">
        <p class="label "><code>engine_only</code>
        </p>
        <div class="content">

    <p >Fallback only to Houdini Engine license.</p>

</div>
    </div>



    <div id="houdini_core_only" class="def  ">
        <p class="label "><code>houdini_core_only</code>
        </p>
        <div class="content">

    <p >Fallback only to Houdini Core license.</p>

</div>
    </div>



    <div id="houdini_fx_only" class="def  ">
        <p class="label "><code>houdini_fx_only</code>
        </p>
        <div class="content">

    <p >Fallback only to Houdini FX license.</p>

</div>
    </div>

    </div>


    <p >This option has been deprecated in favor of the new licensing system
    environment variables. This option will be removed in a later version.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_tractor_usekeepalive"
        data-title="pdg_tractor_usekeepalive"

    >
        <p class="label"><code>PDG_TRACTOR_USEKEEPALIVE</code></p>
        <div class="content">


    <p >Determines <img src="../icons/TOP/tractorscheduler.svg"
         class="icon medium"


    /> <a href="../nodes/top/tractorscheduler.html" class="link   None"title="Schedules work items using Pixar’s Tractor."><img src="../icons/TOP/tractorscheduler.svg"
         class="linkicon"


    />Tractor Scheduler TOP</a> task states, eliminates the need to regularly poll the <strong class="ui">Tractor API</strong> for state changes, and reduces the load on the server.</p>



    <p >When the value is set to <strong>1</strong> (<code>$PDG_TRACTOR_USEKEEPALIVE=1</code>), the <code>pdgjobcmd</code> task wrapper will do the following:</p>


    <ul class="bullets">



    <li class="bullet  ">


        <p class="label" >Sends keep-alive RPC messages to PDG for each active work item. When enough messages <em>are not</em> received, PDG will then stop the given work item’s cook.</p>

    </li>



    <li class="bullet  ">


        <p class="label" >Sends start/stop RPC messages to PDG when each work item’s cook ends with success or failure.</p>

    </li>

    </ul>


    <p >By default, <code>PDG_TRACTOR_USEKEEPALIVE</code> is set to <strong>1</strong>. This reduces the frequency with which the <strong class="ui">Tractor API</strong> is used to keep track of jobs.</p>



    <p >When the value is set to <strong>0</strong> (<code>$PDG_TRACTOR_USEKEEPALIVE=0</code>), the <strong class="ui">Tractor API</strong> will be polled regularly for work item state changes.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_tractor_password_file"
        data-title="pdg_tractor_password_file"

    >
        <p class="label"><code>PDG_TRACTOR_PASSWORD_FILE</code></p>
        <div class="content">


    <p >Enables file-based logins for <img src="../icons/TOP/tractorscheduler.svg"
         class="icon medium"


    /> <a href="../nodes/top/tractorscheduler.html" class="link   None"title="Schedules work items using Pixar’s Tractor."><img src="../icons/TOP/tractorscheduler.svg"
         class="linkicon"


    />Tractor Scheduler TOPs</a>.</p>



    <p >Use <code>$PDG_TRACTOR_PASSWORD_FILE</code> to specify the path to the text file that contains the base64-encoded password you want to use.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_tr_spooler_delgate"
        data-title="pdg_tr_spooler_delgate"

    >
        <p class="label"><code>PDG_TR_SPOOLER_DELGATE</code></p>
        <div class="content">


    <p >Customizes how <img src="../icons/TOP/tractorscheduler.svg"
         class="icon medium"


    /> <a href="../nodes/top/tractorscheduler.html" class="link   None"title="Schedules work items using Pixar’s Tractor."><img src="../icons/TOP/tractorscheduler.svg"
         class="linkicon"


    />Tractor Scheduler TOP</a> tasks are spooled.</p>



    <p >Use <code>$PDG_TR_SPOOLER_DELGATE</code> to specify the Python module that should be used to create the Spooler object. </p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_dir"
        data-title="pdg_dir"

    >
        <p class="label"><code>PDG_DIR</code></p>
        <div class="content">


    <p >The TOP network’s working directory, as specified on the Scheduler node. In TOP parameters, this is an alias for <code>__PDG_DIR__</code>. This is set in the job environment to the local path to the cook working directory.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_temp"
        data-title="pdg_temp"

    >
        <p class="label"><code>PDG_TEMP</code></p>
        <div class="content">


    <p >A shared temporary file directory inside the working directory for the current session. The default is <code>$PDG_DIR/pdgtemp/<var>houdini_process_id</var></code>. This is set in the job environment.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_scriptdir"
        data-title="pdg_scriptdir"

    >
        <p class="label"><code>PDG_SCRIPTDIR</code></p>
        <div class="content">


    <p >A shared script directory inside the temp directory. Script files are copied into this directory if they are listed as file dependencies. The default is <code>$PDG_TEMP/scripts</code>. This is set in the job environment.</p>



    <p >Alternatively, you can put custom scripts in known locations in the shared network filesystem and execute them using that path.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_item_name"
        data-title="pdg_item_name"

    >
        <p class="label"><code>PDG_ITEM_NAME</code></p>
        <div class="content">


    <p >The name of the work item being executed, which also corresponds to the name of the serialized work item file in the data directory. This is set in the job environment.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_hython"
        data-title="pdg_hython"

    >
        <p class="label"><code>PDG_HYTHON</code></p>
        <div class="content">


    <p >If set in Houdini, schedulers use this path instead of <code>$HFS/bin/hython</code>. Note that if this is a different version of Houdini being run by Local Scheduler, at least <code>$HFS</code> will need to be cleared in the work item environment to avoid library conflicts.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_result_server"
        data-title="pdg_result_server"

    >
        <p class="label"><code>PDG_RESULT_SERVER</code></p>
        <div class="content">


    <p >The hostname and port of the server that jobs send their status and results to.  This is set in the job environment.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_pathmap"
        data-title="pdg_pathmap"

    >
        <p class="label"><code>PDG_PATHMAP</code></p>
        <div class="content">


    <p >The path map in JSON form (if it exists).</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_pathmap_zone"
        data-title="pdg_pathmap_zone"

    >
        <p class="label"><code>PDG_PATHMAP_ZONE</code></p>
        <div class="content">


    <p >The custom path map zone for the job which is used instead of the automatically determined zone.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id="pdg_batch_poll_delay"
        data-title="pdg_batch_poll_delay"

    >
        <p class="label"><code>PDG_BATCH_POLL_DELAY</code></p>
        <div class="content">


    <p >Changes the maximum frequency of batch item polling RPCs. Used by the <code>pdgcmd</code> module.</p>


        </div>
    </li>




    <li class="env_variables_item item "
        id=" pdg_release_slot_on_poll"
        data-title=" pdg_release_slot_on_poll"

    >
        <p class="label"><code> PDG_RELEASE_SLOT_ON_POLL</code></p>
        <div class="content">


    <p >Allows schedulers to prevent the acquire/release RPCs if they are not supported. Used by the <code>pdgcmd</code> module.</p>


        </div>
    </li>

    </ul>


            </div>
        </div>




        </div>
    </section>




            <table id="postmeta" class="metatable">















            </table>
        </div>
    </main>


        <div id="toc">



            <div id="toc-body" class="">
                <h1><a href="index.html">Reference</a></h1>










    <section class="heading  ">
        <h2 class="label heading" id="user-interface"
            data-title="user interface"
        >

            User interface





        </h2>
        <div id="user-interface-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="menus"
        >

        <p class="label">

                <span class="label-text"> <a href="menus.html" class="link   None"title="Explains each of the items in the main menus.">Menus</a></span>

        </p>

            <p class="summary">Explains each of the items in the main menus.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="viewers"
        >

        <p class="label">

                <span class="label-text"> <a href="views/index.html" class="link   None"title="Viewer pane types.">Viewers</a></span>

        </p>

            <p class="summary">Viewer pane types.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="panes"
        >

        <p class="label">

                <span class="label-text"> <a href="panes/index.html" class="link   None"title="Documents the options in various panes.">Panes</a></span>

        </p>

            <p class="summary">Documents the options in various panes.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="windows"
        >

        <p class="label">

                <span class="label-text"> <a href="windows/index.html" class="link   None"title="Documents the options in various user interface windows.">Windows</a></span>

        </p>

            <p class="summary">Documents the options in various user interface windows.</p>


    </li>



    </ul>



        </div>
    </section>










    <section class="heading  ">
        <h2 class="label heading" id="programming"
            data-title="programming"
        >

            Programming





        </h2>
        <div id="programming-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="expression functions"
        >

        <p class="label">

                <span class="label-text"> <a href="../expressions/index.html" class="link   None"title="Expression functions let you compute the value of parameters.">Expression functions</a></span>

        </p>

            <p class="summary">Expression functions let you compute the value of parameters.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="expression cookbook"
        >

        <p class="label">

                <span class="label-text"> <a href="expression_cookbook.html" class="link   None"title="Tips and tricks for writing expressions to accomplish various effects.">Expression cookbook</a></span>

        </p>

            <p class="summary">Tips and tricks for writing expressions to accomplish various effects.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="python scripting"
        >

        <p class="label">

                <span class="label-text"> <a href="../hom/index.html" class="link   None"title="How to script Houdini using Python and the Houdini Object Model.">Python scripting</a></span>

        </p>

            <p class="summary">How to script Houdini using Python and the Houdini Object Model.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="vex"
        >

        <p class="label">

                <span class="label-text"> <a href="../vex/index.html" class="link   None"title="VEX is a high-performance expression language used in many places in Houdini, such as writing shaders.">VEX</a></span>

        </p>

            <p class="summary">VEX is a high-performance expression language used in many places in Houdini, such as writing shaders.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="hscript commands"
        >

        <p class="label">

                <span class="label-text"> <a href="../commands/index.html" class="link   None"title="HScript is Houdini’s legacy scripting language.">HScript commands</a></span>

        </p>

            <p class="summary">HScript is Houdini’s legacy scripting language.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="hwebserver"
        >

        <p class="label">

                <span class="label-text"> <a href="../hwebserver/index.html" class="link   None"title="Functions and classes for running a web server inside a graphical or non-graphical Houdini session.">hwebserver</a></span>

        </p>

            <p class="summary">Functions and classes for running a web server inside a graphical or non-graphical Houdini session.</p>


    </li>



    </ul>



        </div>
    </section>










    <section class="heading  ">
        <h2 class="label heading" id="command-line"
            data-title="command line"
        >

            Command line





        </h2>
        <div id="command-line-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="starting houdini from the command line"
        >

        <p class="label">

                <span class="label-text"> <a href="commandline.html" class="link   None">Starting Houdini from the command line</a></span>

        </p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="stand-alone utilities"
        >

        <p class="label">

                <span class="label-text"> <a href="utils/index.html" class="link   None"title="Houdini includes a large number of useful command-line utility programs.">Stand-alone utilities</a></span>

        </p>

            <p class="summary">Houdini includes a large number of useful command-line utility programs.</p>


    </li>



    </ul>



        </div>
    </section>










    <section class="heading  ">
        <h2 class="label heading" id="guru-level"
            data-title="guru level"
        >

            Guru level





        </h2>
        <div id="guru-level-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="context options"
        >

        <p class="label">

                <span class="label-text"> <a href="contextoptions.html" class="link   None"title="Context options are similar to environment variables, except they are stored with the HIP file and it’s easy to use them in expressions.">Context options</a></span>

        </p>

            <p class="summary">Context options are similar to environment variables, except they are stored with the HIP file and it’s easy to use them in expressions.</p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="match houdini camera lenses to the real world"
        >

        <p class="label">

                <span class="label-text"> <a href="cameralenses.html" class="link   None">Match Houdini camera lenses to the real world</a></span>

        </p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="useful internal variables"
        >

        <p class="label">

                <span class="label-text"> <a href="internalvariables.html" class="link   None">Useful Internal Variables</a></span>

        </p>


    </li>



    </ul>



        </div>
    </section>










    <section class="heading  ">
        <h2 class="label heading" id="plugins"
            data-title="plugin installation"
        >

            Plugin installation





        </h2>
        <div id="plugins-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="houdini packages"
        >

        <p class="label">

                <span class="label-text"> <a href="plugins.html" class="link   None"title="How to write and combine multiple environment variable definition files for different plug-ins, tools, and add-ons.">Houdini packages</a></span>

        </p>

            <p class="summary">How to write and combine multiple environment variable definition files for different plug-ins, tools, and add-ons.</p>


    </li>



    </ul>



        </div>
    </section>










    <section class="heading  ">
        <h2 class="label heading" id="houdini-engine"
            data-title="houdini engine"
        >

            Houdini Engine





        </h2>
        <div id="houdini-engine-body" class="content">



    <ul class="subtopics_item_group item_group">













    <li class="item subtopics_item ind-item   "
        data-title="houdini engine python api"
        >

        <p class="label">

                <span class="label-text"><a href="../hapi/index.html" class="link   None"title=" Python wrapper of HAPI API ">Houdini Engine Python API</a></span>

        </p>

            <p class="summary"> Python wrapper of HAPI API </p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="houdini engine c api"
        >

        <p class="label">

                <span class="label-text"><a href="https://www.sidefx.com/docs/hengine18.6/" class="link   None">Houdini Engine C API</a></span>

        </p>


    </li>















    <li class="item subtopics_item ind-item   "
        data-title="houdini engine sessionsync"
        >

        <p class="label">

                <span class="label-text"><a href="henginesessionsync.html" class="link   None"title="Utility that lets you run a session of Houdini Engine inside Houdini.">Houdini Engine SessionSync</a></span>

        </p>

            <p class="summary">Utility that lets you run a session of Houdini Engine inside Houdini.</p>


    </li>



    </ul>



        </div>
    </section>


            </div>
        </div>




</body>
</html>
